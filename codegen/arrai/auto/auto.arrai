#!/usr/bin/env arrai

let generate = //{./generate};
let go       = //{./go};
let sysl     = //{./sysl};

# main

let [_, outDir, repo, path, json, appname, pbbase] = //os.args;
let basepath = $`${repo}/${path}`;

let json = cond json {"-": //os.stdin, _: //os.file(json)};
let module = //encoding.json.decode(json);
let app = module("apps")(appname);

let config = generate.config((:basepath, :json, :module, :app));
let (:app, :appname, :basepath, :endpoints, :json, :module, ...) = config;

let type = cond {'gRPC' <: sysl.patterns(app): 'grpc-app', _: 'rest-app'};
let targets = //rel.union(endpoints >> (sysl.endpoint.calls(.@value) => .@item) => (.@item => .('target')));
let apps = module('apps') where .@value('name') <: targets;

let fixPBPath =
    let [from, to] = //seq.split("=", pbbase);
    //re.compile($`^${from}(.*)/[^/]+${'$'}`).sub(to++`$1`);

{
    '.github': {'workflows': {
        'test.yml': //{./workflows/test}(repo, outDir),
    }},
    'Dockerfile': (ifExists: 'ignore', file: //{./dockerfile}(outDir)),
    'README.md': (ifExists: 'ignore', file: //{./readme}(config, outDir)),
    'cmd': {outDir: {'main.go': (
        ifExists: 'ignore',
        file: //{./main}(config, outDir),
    )}},
    '.gitignore': (ifExists: 'ignore', file: //{./gitignore}),
    '.gitattributes': (ifExists: 'ignore', file: //{./gitattributes}),
    'gen': {'pkg': {'servers': {outDir: (
        ifExists: 'replace',
        dir:
            generate.generate(config, generate.groups(type))
            +> (apps => \(@: _, @value: app)
                let config = generate.config((:basepath, :module, :app, :fixPBPath));
                let type = cond {'gRPC' <: sysl.patterns(app): 'grpc-client', _: 'rest-client'};
                (@: go.package(app), @value: generate.generate(config, generate.groups(type)))
            ),
    )}}},
}
