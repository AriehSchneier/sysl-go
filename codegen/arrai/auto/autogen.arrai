let generate = \(:outDir, :json, :repo, :path, :appname, :pbbase) \template
    let basepath = $`${repo}/${path}`;
    let module = //encoding.json.decode(json);
    let app = module("apps")(appname);

    let config = //{./generate}.config((:basepath, :json, :module, :app));
    let (:endpoints, :module, ...) = config;

    let targets = //rel.union(endpoints >> (//{./sysl}.endpoint.calls(.@value) => .@item) => (.@item => .('target')));
    let apps = module('apps') where .@value('name') <: targets;

    let fixPBPath =
        let [from, to] = //seq.split("=", pbbase);
        //re.compile($`^${from}(.*)/[^/]+${'$'}`).sub(to++`$1`);

    template((:fixPBPath, :repo, :outDir, :config, :apps))
;

let defaultTemplate = \(:fixPBPath, :repo, :outDir, :config, :apps, ...)
    {
        '.github': {'workflows': {
            'test.yml': //{./workflows/test}(repo, outDir),
        }},
        'Dockerfile': (ifExists: 'ignore', file: //{./dockerfile}(outDir)),
        'README.md': (ifExists: 'ignore', file: //{./readme}(config, outDir)),
        'cmd': {outDir: {'main.go': (
            ifExists: 'ignore',
            file: //{./main}(config, outDir),
        )}},
        '.gitignore': (ifExists: 'ignore', file: //{./gitignore}),
        '.gitattributes': (ifExists: 'ignore', file: //{./gitattributes}),
        'gen': {'pkg': {'servers': {outDir: //{./servers}(fixPBPath, config, apps)}}},
    }
;

(
    :generate,
    :defaultTemplate
)
