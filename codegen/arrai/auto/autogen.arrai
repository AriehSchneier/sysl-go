let validate = //{./validate};

let generate = \(:outDir, :json, :repo, :path, :appname, :pbbase) \template
    let basepath = $`${repo}/${path}`;
    let module = //encoding.json.decode(json);
    let app = module("apps")(appname);

    let config = //{./generate}.config((:basepath, :json, :module, :app));
    let (:endpoints, :module, ...) = config;

    let targets = //rel.union(endpoints >> (//{./sysl}.endpoint.calls(.@value) => .@item) => (.@item => .('target')));
    let apps = module('apps') where .@value('name') <: targets;

    let _ = validate.app(app);

    let fixPBPath =
        let [from, to] = //seq.split("=", pbbase);
        //re.compile($`^${from}(.*)/[^/]+${'$'}`).sub(to++`$1`);

    # internal/gen/pkg/servers is required in all generated code and codegen.mk, the location of server code shouldn't be editable
    template((:repo, :outDir, :config, :apps)) +> {
        'gen': (ifExists: 'remove'),
        'internal': {'gen': {'pkg': {'servers': {outDir: //{./servers}(fixPBPath, config, apps)}}}},
    }
;

let defaultTemplate = \(:repo, :outDir, :config, ...)
    {
        '.github': {'workflows': {
            'test.yml': (ifExists: 'ignore', file: //{./workflows/test}(repo, outDir)),
        }},
        'Dockerfile': (ifExists: 'ignore', file: //{./dockerfile}(outDir)),
        'README.md': (ifExists: 'ignore', file: //{./readme}(config, outDir)),
        'cmd': {outDir: {'main.go': (
            ifExists: 'ignore',
            file: //{./main}(config, outDir),
        )}},
        '.gitignore': (ifExists: 'ignore', file: //{./gitignore}),
        '.gitattributes': (ifExists: 'ignore', file: //{./gitattributes}),
    }
;

let tuplifiedArgs = \[outDir, repo, path, json, appname, pbbase]
    let json = cond json {"-": //os.stdin, _: //os.file(json)};
    (
        :outDir,
        :repo,
        :path,
        :json,
        :appname,
        :pbbase,
    )
;

(
    :tuplifiedArgs,
    :generate,
    :defaultTemplate,
)
