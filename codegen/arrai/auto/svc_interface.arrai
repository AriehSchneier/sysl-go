let go = //{./go};

\(:app, :appname, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :restEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let signature = //{./service_method}.signature(module, client);
    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}

        // ${structName} ...
        type ${structName} struct {
        }

        // New${structName} for ${appname}
        func New${structName}() *${structName} {
            return &${structName}{}
        }

        ${endpoints >> \(@:_, @value: ep) client.clientStruct(ep)::\i}

        // ServiceInterface for ${appname}
        type ServiceInterface struct {
            ${endpoints >> \(@:_, @value: ep)
                let method = go.methodName(app, ep);
                $`${method} func${signature(app, ep)}`
            ::\i}
        }

        ${client.config}
    `
