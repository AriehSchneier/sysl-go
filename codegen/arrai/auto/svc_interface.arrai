let go = //{./go};
let (:RESTServiceSignature, :renderSignatureAsField, ...) = //{./service_method};

\(:app, :appname, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :restEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}

        // ${structName} ...
        type ${structName} struct {
        }

        // New${structName} for ${appname}
        func New${structName}() *${structName} {
            return &${structName}{}
        }

        ${endpoints >> \(@:_, @value: ep) client.clientStruct(ep)::\i}

        // ServiceInterface for ${appname}
        type ServiceInterface struct {
            ${
                endpoints >> \(@:_, @value: ep) renderSignatureAsField(
                    go.methodName(app, ep),
                    RESTServiceSignature(module, client, app, ep),
                )
            ::\i}
        }

        ${client.config}
    `
