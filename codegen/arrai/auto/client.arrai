let go = //{./go};
let sysl = //{./sysl};

\(:appname, :clientDeps, :hasDB, :module)
    let goModule = go.module(module);
    (
        notEmpty: \ep
            hasDB || sysl.endpoint.calls(ep),

        new: \ep
            let method = go.methodName(ep);
            let calls = sysl.endpoint.calls(ep);
            cond {
                calls || hasDB: $`
                    ${method}Client{
                        ${calls >>
                            let dep = goModule.targetApp(.('target'));
                            let package = go.package(dep);
                            let ep = sysl.app.endpoint(dep, .('endpoint').s);
                            let method = go.methodName(ep);
                            $`${go.name(package)}${method}: s.${package}Service.${method},`
                        ::\i:\n}
                        ${cond {hasDB: $`
                            Conn: conn,
                            ${sysl.endpoint.sqlStatements(ep) => $`${//str.title(.@)}: ${.@}Stmt,` orderby .::\i}
                        `}}
                    }
                `,
            },

        clientStruct: \ep
            let method = go.methodName(ep);
            let calls = sysl.endpoint.calls(ep);
            cond {hasDB || calls: $`
                // ${method}Client provides access to all
                // the clients used by the ${method} method.
                type ${method}Client struct {
                    ${cond {hasDB: $`
                        Conn *sql.Conn
                        ${sysl.endpoint.sqlStatements(ep) => $`${//str.title(.@)} *sql.Stmt` orderby .::\i}
                    `}}
                    ${calls >> goModule.callSignature(.)::\i\n}
                }
            `},

        config: $`
            // DownstreamConfig for ${appname}
            type DownstreamConfig struct {
                ContextTimeout time.Duration ``mapstructure:"contextTimeout" yaml:"contextTimeout"``
                ${clientDeps orderby . >>
                    let config = cond {
                        goModule.depField(.).grpc: `config.CommonGRPCDownstreamData`,
                        _: `config.CommonDownstreamData`,
                    };
                    $`${go.name(.import)} ${config} ``mapstructure:"${.import}" yaml:"${.import}"```
                ::\i}
            }
        `,
    )
