let go = //{./go};

# The following demo model was generated from
# Service:
#   Foo(FooReq):
#     SomeBackend <- POST /blah
#     return error <: Error
#
#   !type Error:
#     code <: string
#     meaning <: string
let modelWithSourceContextdEndpoint = <<('{
 "apps": {
  "Service": {
   "name": {
    "part": [
     "Service"
    ]
   },
   "endpoints": {
    "Foo": {
     "name": "Foo",
     "param": [
      {
       "name": "FooReq",
       "type": {
        "noType": {}
       }
      }
     ],
     "stmt": [
      {
       "call": {
        "target": {
         "part": [
          "SomeBackend"
         ]
        },
        "endpoint": "POST /blah"
       },
       "sourceContext": {
        "file": "demo.sysl",
        "start": {
         "line": 3,
         "col": 4
        },
        "end": {
         "line": 3,
         "col": 19
        }
       }
      },
      {
       "ret": {
        "payload": "error <: Error"
       },
       "sourceContext": {
        "file": "demo.sysl",
        "start": {
         "line": 4,
         "col": 4
        },
        "end": {
         "line": 4,
         "col": 10
        }
       }
      }
     ],
     "sourceContext": {
      "file": "demo.sysl",
      "start": {
       "line": 2,
       "col": 2
      },
      "end": {
       "line": 6,
       "col": 2
      }
     }
    }
   },
   "types": {
    "Error": {
     "tuple": {
      "attrDefs": {
       "code": {
        "primitive": "STRING",
        "sourceContext": {
         "file": "demo.sysl",
         "start": {
          "line": 7,
          "col": 12
         },
         "end": {
          "line": 7,
          "col": 12
         }
        }
       },
       "meaning": {
        "primitive": "STRING",
        "sourceContext": {
         "file": "demo.sysl",
         "start": {
          "line": 8,
          "col": 15
         },
         "end": {
          "line": 8,
          "col": 15
         }
        }
       }
      }
     },
     "sourceContext": {
      "file": "demo.sysl",
      "start": {
       "line": 6,
       "col": 2
      },
      "end": {
       "line": 8,
       "col": 21
      }
     }
    }
   },
   "sourceContext": {
    "file": "demo.sysl",
    "start": {
     "line": 1,
     "col": 1
    },
    "end": {
     "line": 1
    }
   }
  }
 }
}')>>;
let errorReturnTypes = //encoding.json.decode(modelWithSourceContextdEndpoint)("apps")("Service");
let errorTypes = {"Error_"};

(
    goName: //test.assert.equal("Foo")(go.name("foo")),
    goNameWithUnderscore: //test.assert.equal("Api_name")(go.name("api_name")),
    goNameErrorGetsMangledToAvoidCollidingWithError: //test.assert.equal("Error_")(go.name("Error")),
    goNameErrorrIsntMangled: //test.assert.equal("Errorr")(go.name("Errorr")),

    pbMethodInfoCanDeduceRequestType: //test.assert.equal("EncodingRequest")(
        go.pbMethodInfo(
            {
                'name': (s: 'Rot13'),
                'param': (a: [{'name': (s: 'EncodingRequestRequest'), 'type': {'typeRef': {'ref': {'appname': {'part': (a: [(s: 'EncodingRequest')])}}}}}]),
                'stmt': (a: [{'ret': {'payload': (s: 'ok <: EncodingResponse')}}]),
            }).'requestType'
    ),
    goErrorReturnTypes: //test.assert.equal(errorTypes)(go.errorReturnTypes(errorReturnTypes)),
)
