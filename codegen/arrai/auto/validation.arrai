let fatal = //{./fatal};
let sysl = //{./sysl};

# `paramValidateTags` returns a mapping of an endpoint parameter name to the `validate` struct tags
# set against the endpoint. Endpoints support the encoding of `validate` tags either in the form 
# of a single string delimited by a space (1) or a string array for instances where the tags
# themselves include spaces:
# `/query/{age <: int}/{height <: int} [validate="age:min=0,max=100 height:min=0"]  [1]
# `/query/{age <: int}/{height <: int} [validate=["age:oneof=1 2","height:min=0"]]  [2]
# 
# `ep` is the sysl.proto representation of an endpoint.
# 
# Example response:
# `{'age':'validate:min=0,max=100', 'height':'validate:min=0'}`
let paramValidateTags = \ep
    let split = \delim \seq let [head, ...tail] = //seq.split(delim, seq); [head, //seq.join(delim, tail)];
    let tags = \string split(':', string) -> (@:.(0), @value:.(1));
    cond ep('attrs')?('validate')?:{} {
        {'s':v, ...}: //seq.split(' ', v.s) => tags(.@item),
        {'a':{'elt':(a:a)}, ...}: a => let {'s':(s:s), ...} = .@item; tags(s),
    };


let quoteSpaced = 
    let hasSpace = //re.compile('\\s').match;
    \s cond {hasSpace(s): $`'${s}'`, _: s};

let validationTagForType = \type 
    let tags =
        cond type {
            {'constraint': c, ...}:
                //rel.union(c.a => cond .@item {
                    {'length': l, ...}:
                        l => cond . {
                            (@: 'max', @value: m): $`max=${m.s}`,
                            (@: 'min', @value: m): $`min=${m.s}`,
                        } where .
                })
        } | cond type {
            {'attrs': a, ...}:
                (
                    # first check openapi 3.0.3
                    cond a {{'min':m, 'exclusiveMin':{'s':(s: '(b: {})'), ...}, ...}: {$`min=${m('s').s}`}}
                    | cond a {{'min':m, 'exclusiveMin':{'s':(s: '(b: true)'), ...}, ...}: {$`gt=${m('s').s}`}}
                    || #otherwise check openapi 3.1.0
                    cond a {{'min':m, ...}: {$`min=${m('s').s}`}}
                    | cond a {{'exclusiveMin':m, ...}: {$`gt=${m('s').s}`}}
                )
                |
                (
                    # first check openapi 3.0.3
                    cond a {{'max':m, 'exclusiveMax':{'s':(s: '(b: {})'), ...}, ...}: {$`max=${m('s').s}`}}
                    | cond a {{'max':m, 'exclusiveMax':{'s':(s: '(b: true)'), ...}, ...}: {$`lt=${m('s').s}`}}
                    || #otherwise check openapi 3.1.0
                    cond a {{'max':m, ...}: {$`max=${m('s').s}`}}
                    | cond a {{'exclusiveMax':m, ...}: {$`lt=${m('s').s}`}}
                )
                |
                (
                    cond a {{'openapi_enum': {'a': {'elt': (a: e, ...), ...}, ...}, ...}: {$`oneof=${e >> quoteSpaced(.('s').s):: }`}}
                )
        };
    cond {tags:
        //seq.join(',', cond { !sysl.type.required(type): ['omitempty']} ++ (tags orderby .))
    };

(
    :paramValidateTags,
    :validationTagForType,
)