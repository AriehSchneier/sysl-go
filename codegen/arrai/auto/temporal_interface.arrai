let go = //{./go};
let sysl = //{./sysl};
let temporal = //{./temporal};
let (:temporalServiceSignature, :renderSignatureAsFieldWithNewlinesParams, ...) = //{./service_method};

\(:app, :appname, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :nonRestEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let hasPb =
        let annotations = app('attrs')?:{};
        annotations('go_package')?:false || annotations('go_pb_package')?:false
    ;
    let appnameObj = app('name')?:{};
    let workflows = temporal.workflows(app);
    let mainActs = temporal.activitiesOfMainApp(module, app);
    let intfSignature = \eps
        eps orderby .name >> \(:ep, ...) renderSignatureAsFieldWithNewlinesParams(
            go.methodName(app, ep),
            temporalServiceSignature(module, client, app, ep),
        )
    ;
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | (hasPb && {go.pbImport(app)}))}

        ${(mainActs => sysl.endpoint.epFromCall(module, .)) orderby . >> client.clientStruct(.)::\i}

        ${
            workflows where client.notEmpty(.ep) orderby . >> \(:ep, ...)
                let (:name, :fields, ...) = temporal.activityStructFromEp(module, app, ep);
                $`
                    type ${name} struct {
                        ${fields orderby .name >> $`${.name} func${.sig}`::\i}
                    }
                `
        ::\i}

        // TemporalServiceInterface for ${appname}
        type TemporalServiceInterface struct {
            // Workflows
            ${intfSignature(workflows)::\n}

            // Activities
            ${
                # only define activities that are calls to its own temporal worker
                intfSignature(mainActs => (name: .('endpoint'), ep: sysl.endpoint.epFromCall(module, .)))
            ::\n}
        }

        ${client.config}
    `
