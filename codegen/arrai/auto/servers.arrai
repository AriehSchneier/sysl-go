\fixPBPath \config \apps
    let (:basepath, :module, app: mainApp, ...)   = config;
    let generate                                  = //{./generate};
    let (:package, ...)                           = //{./go};
    let (:patterns, app: appUtil, ...)            = //{./sysl};

    let type =
        let patterns = patterns(mainApp);
        cond {
            'temporal' <: patterns: 'temporal-app',
            'gRPC' <: patterns    : 'grpc-app',
            _                     : 'rest-app',
        }
    ;

    let clientType =
        let dependencies = appUtil.dependenciesWithSource(mainApp) => .app('part');
        \client
            let patterns = patterns(client);
            cond {
                'temporal' <: patterns: 'temporal-client',
                # if main app is gRPC and the client app only has types and it is used by main app in endpoints,
                # then treat client as gRPC
                'gRPC' <: patterns || (
                    type = 'grpc-app' &&
                    client('name', 'part') <: dependencies &&
                    !(client('endpoints')?:false)
                ): 'grpc-client',
                _: 'rest-client'
            }
    ;

    (
        ifExists: 'replace',
        dir:
            generate.generate(config, generate.groups(type))
            +> ((
                apps => \(@: _, @value: app)
                    let config = generate.config((:basepath, :module, :app, :fixPBPath));
                    let type = clientType(app);
                    # if app is grpc client and it does not have endpoints, do not generate.
                    # let shouldGenerate = cond type {'grpc-client': app('endpoints')?:false, _: true};
                    # shouldGenerate &&
                    (@: package(app), @value: generate.generate(config, generate.groups(type)))
            ) where .),
    )
