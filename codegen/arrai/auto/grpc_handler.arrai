let go = //{./go};
let sysl = //{./sysl};

\(
    :app,
    :appname,
    :basepath,
    :clientDeps,
    :endpoints,
    :goModule,
    :hasDB,
    :module,
    :nonRestEndpoints,
    ...
)
    let client = //{./client}((:appname, :clientDeps, :hasDB, :module));
    let goAppname = go.name(appname);
    let authorisationRule = \ep cond ep {
        {'attrs': {'authorisation_rule': {'s': (s: rule)}, ...}, ...} : rule,
    };
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | go.pbPackage(app))}

        // GrpcServiceHandler for ${appname} API
        type GrpcServiceHandler struct {
            pb.Unimplemented${goAppname}Server
            genCallback         core.GrpcGenCallback
            serviceInterface    *GrpcServiceInterface
            authorisationRules  map[string]authrules.Rule
            ${clientDeps orderby . >> (goModule.depField(.) -> $`${.name} ${.type}`)::\i}
        }

        // NewGrpcServiceHandler for ${appname}
        func NewGrpcServiceHandler(
            ctx context.Context,
            cfg *config.DefaultConfig,
            hooks *core.Hooks,
            genCallback core.GrpcGenCallback,
            serviceInterface *GrpcServiceInterface,
            ${clientDeps orderby . >> (goModule.depField(.) -> $`${.name} ${.type},`)::\i}
        ) (*GrpcServiceHandler, error) {
            ${cond {hasDB: $`
                db, dberr := database.GetDBHandle()
                if dberr != nil {
                        return nil, dberr
                }
            `}}

            authorisationRules := make(map[string]authrules.Rule)
            ${nonRestEndpoints >> \(@value: ep, ...)
                let method = go.name(ep('name').s);
                let ruleExpression = authorisationRule(ep);
                cond {authorisationRule(ep): $`
                    authRule${method}, authRuleErr := core.ResolveGRPCAuthorisationRule(ctx, cfg, hooks, "${method}", ${"`"+ruleExpression+"`"})
                    if authRuleErr != nil {
                        return nil, authRuleErr
                    }
                    authorisationRules["${method}"] = authRule${method}
                `}
            ::}

            return &GrpcServiceHandler{
                genCallback: genCallback,
                serviceInterface: serviceInterface,
                authorisationRules: authorisationRules,
                ${clientDeps orderby . >> (goModule.depField(.) -> $`${.name}: ${.name},`)::\i}
            }, nil
        }

        // RegisterServer registers the ${appname} gRPC service
        func (s *GrpcServiceHandler) RegisterServer(ctx context.Context, server *grpc.Server) {
            pb.Register${goAppname}Server(server, s)
        }

        ${nonRestEndpoints >> \(@value: ep, ...)
            let method = go.name(ep('name').s);
            $`
                // ${method} ...
                func (s *GrpcServiceHandler) ${method}(ctx context.Context, req *pb.${method}Request) (*pb.${method}Response, error) {
                    if s.serviceInterface.${method} == nil {
                        return nil, status.Errorf(codes.Unimplemented, "method ${method} not implemented")
                    }

                    ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
                    defer cancel()
                    ${cond {authorisationRule(ep): $`
                        if _, ok := s.authorisationRules["${method}"]; !ok {
                            return nil, status.Errorf(codes.Unimplemented, "authorisation rule for method ${method} not implemented")
                        }
                        ctx, err := s.authorisationRules["${method}"](ctx)
                        if err != nil {
                            return nil, err
                        }
                    `}}
                    client := ${client.new(ep)}
                    return s.serviceInterface.${method}(ctx, req, client)
                }
            `
        ::}
    `
