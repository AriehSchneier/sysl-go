let go = //{./go};
let sysl = //{./sysl};

let generators = {
    "app.go":                //{./svc_app},
    "grpc_client.go":        //{./grpc_client},
    "grpc_handler.go":       //{./grpc_handler},
    "grpc_interface.go":     //{./grpc_interface},
    "grpc_mocks.go":         //{./grpc_mocks},
    "mocks.go":              //{./svc_mocks},
    "requestrouter.go":      //{./svc_router},
    "service.go":            //{./svc_service},
    "servicehandler.go":     //{./svc_handler},
    "serviceinterface.go":   //{./svc_interface},
    "tester.go":             //{./svc_tester},
    "types.go":              //{./svc_types},
    "temporal_client.go":    //{./temporal_client},
    "temporal_interface.go": //{./temporal_interface},
    "temporal_handler.go":   //{./temporal_handler},
    "temporal_mocks.go":     //{./temporal_mocks},
    "temporal_tester.go":    //{./temporal_tester},
};

let hasRelationTypes = \app
    let candidates = app('types')?:{} >> .('relation')?:{};
    candidates where .@value;

let _inferHasDB = \app hasRelationTypes(app);

(
    # _inferHasDB is an implementation detail, but we need to export it
    # in order to unit test it.
    _inferHasDB: _inferHasDB,

    groups:
        let auto = "auto";
        let restClient = {"mocks.go", "service.go", "types.go"};
        let restService = {"requestrouter.go", "service.go", "servicehandler.go", "serviceinterface.go", "tester.go", "types.go"};
        let grpcClient = {"grpc_client.go", "grpc_mocks.go"};
        let grpcService = {"grpc_handler.go", "grpc_interface.go", "tester.go"};
        let app = {"app.go", "main.go.sample"};
        let temporalService = { "temporal_interface.go", "temporal_handler.go", "types.go", "app.go", "temporal_tester.go"};
        let temporalClient = {"temporal_client.go", "types.go", "temporal_mocks.go"};
        {
            "rest-service": restService,
            "rest-app":     restService | app,
            "rest-client":  restClient,
            "grpc-service": grpcService,
            "grpc-app":     grpcService | app,
            "grpc-client":  grpcClient,
            "temporal-app": temporalService,
            "temporal-client": temporalClient,
        },

    config: \(:app, :basepath, :module, ...extra)
        let goModule = go.module(module);
        let endpoints = app("endpoints")?:{} where .@ != "..." orderby .@;
        let restEndpoints = endpoints where .@item.@value('restParams')?:();
        let nonRestEndpoints = endpoints where !.@item.@value('restParams')?:() && .@item.@value('param')?:();
        extra +> (
            :app,
            :basepath,
            :module,

            :endpoints,
            :restEndpoints,
            :nonRestEndpoints,
            :goModule,
            appname:       sysl.app.name(app),
            clientDeps:    goModule.clientDeps(app),
            hasDB:         _inferHasDB(app),
        ),

    generate: \config \include
        generators where .@ <: include >> .(config) where .@value,
)
