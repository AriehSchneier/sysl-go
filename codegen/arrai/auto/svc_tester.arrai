let go = //{./go};
let sysl = //{./sysl};
let grpc = //{./grpc};

\(:app, :appname, :basepath, :clientDeps, :module, :goModule, :restEndpoints, :nonRestEndpoints, ...)
    let package = go.package(app);
    let gRPC = "gRPC" <: sysl.patterns(app);
    let goAppname = cond {gRPC: go.name(grpc.app.name(app)), _:""};
    let grpcClientDeps = clientDeps where goModule.depField(.).grpc;
    let restClientDeps = clientDeps where !goModule.depField(.).grpc;

    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | cond {gRPC: {go.pbImport(app)}})}

        // TestServer for ${appname}
        type TestServer struct {
            e     *e2e.Tester
            Mocks Mocks
            ${cond {gRPC: $`

                conn   *grpc.ClientConn
                client pb.${goAppname}Client
            `}}
        }

        type Mocks struct {
            ${clientDeps orderby . >> $`${go.name(.import)} *${.import}.DownstreamMocks`::\i}
        }

        ${cond {grpcClientDeps: $`
            func overrideGrpcDialOptions(t syslgo.TestingT, mocks *Mocks) func(serviceName string, cfg *config.CommonGRPCDownstreamData) ([]grpc.DialOption, error) {
                return func(serviceName string, cfg *config.CommonGRPCDownstreamData) ([]grpc.DialOption, error) {
                    switch serviceName {
                    ${
                        grpcClientDeps orderby . >>
                        let upperName = go.name(.import);
                        $`
                            case "${.import}":
                                cfg.ServiceAddress = "mock${upperName}"
                                mocks.${upperName} = ${.import}.NewDownstreamMocks(t)
                                return mocks.${upperName}.GetDialOption(), nil
                        `
                    ::\i}
                    }

                    return nil, errors.New("Unknown service name?")
                }
            }

        `}}
        func NewTestServer(t syslgo.TestingT, ctx context.Context, createService, cfg interface{}) *TestServer {
            return newTestServerImp(t, ctx, createService, cfg, false)
        }

        func NewIntegrationTestServer(t syslgo.TestingT, ctx context.Context, createService, cfg interface{}) *TestServer {
            return newTestServerImp(t, ctx, createService, cfg, true)
        }

        func newTestServerImp(t syslgo.TestingT, ctx context.Context, createService, cfg interface{}, withActualDownstreams bool) *TestServer {
            byteCfg, err := e2e.ConfigToYamlData(cfg, core.GetAppConfigType(createService))
            require.NoError(t, err, "Failed to convert cfg")

            testServer, ctx, testHooks := e2e.NewTester(t, context.Background(), byteCfg)

            var mocks Mocks
            if withActualDownstreams {
                testHooks.HTTPClientBuilder = nil
            } ${cond {grpcClientDeps: $`
                    else {
                        testHooks.OverrideGrpcDialOptions = overrideGrpcDialOptions(t, &mocks)
                    }
                `}}

            // Force ContextTimeout
            testHooks.ValidateConfig = func(_ context.Context, cfg *config.DefaultConfig) error {
                var downstream *DownstreamConfig
                var is bool
                if downstream, is = cfg.GenCode.Downstream.(*DownstreamConfig); !is || downstream == nil {
                    downstream = &DownstreamConfig{}
                    cfg.GenCode.Downstream = downstream
                }
                if downstream.ContextTimeout == 0 {
                    downstream.ContextTimeout = e2e.DownstreamTimeout
                }
                ${restClientDeps orderby . >> $`
                    if downstream.${go.name(.import)}.ClientTimeout == 0 {
                        downstream.${go.name(.import)}.ClientTimeout = e2e.DownstreamTimeout
                    }
                `::\i}

                return nil
            }

            createService = e2e.CreateServiceWithTestHooksPatched(createService, testHooks)

            srv, err := NewServer(ctx, createService)
            require.NoError(t, err)

            err = srv.Start()
            require.NoError(t, err)

            ${cond {gRPC: $`
                conn, err := grpc.Dial("test${goAppname}", grpc.WithContextDialer(testServer.GetBufDialer), grpc.WithInsecure())
                require.NoError(t, err)
                client := pb.New${goAppname}Client(conn)
            `}}

            ${cond {restClientDeps: $`
                if !withActualDownstreams {
                    ${restClientDeps orderby . >> $`mocks.${go.name(.import)} = ${.import}.NewDownstreamMocks(testServer)`::\i}
                }
            `}}

            return &TestServer{
                e: testServer,
                Mocks: mocks,
                ${cond {gRPC: $`

                    conn:   conn,
                    client: client,
                `}}
            }
        }

        func (t *TestServer) GetE2eTester() *e2e.Tester {
            return t.e
        }

        func (t *TestServer) Close() {
            ${cond {gRPC: $`
                if t.conn != nil {
                    t.conn.Close()
                }
            `}}
            t.e.Close()
            ${grpcClientDeps orderby . >> $`
                if t.Mocks.${go.name(.import)} != nil {
                    t.Mocks.${go.name(.import)}.Stop()
                }
            `::\i}
        }

        ${restEndpoints >> \(@value: ep, ...)
            let name = go.methodName(app, ep);
            let testType = $`${name}Test`;
            let args = ep('restParams')?:{}
                        -> (.('queryParam')?.a:{}) ++ (.('urlParam')?.a:{})
                        orderby sysl.source(.@item('type'))
                        >> $`${go.asVariableName(.@item('name').s)} ${go.type(module, app, .@item('type'))}`;
            $`
                type ${testType} struct {
                    e  *e2e.Tester
                    tc e2e.TestCall2
                }

                func (t *TestServer) ${name}(${args ::, }) *${testType} {
                    basePath := core.SelectBasePath("${app('attrs')?('basePath')?('s').s:""}", t.e.CfgBasePath())
                    if basePath == "/" {
                        basePath = ""
                    }
                    ${
                        let pathvars = ep('restParams')('urlParam')?.a:{};
                        let terms = pathvars => $`{${.@item('name').s}}`;
                        let formatArgs = $`${//seq.split("/")(ep('restParams')('path').s) >> cond {. <: terms: "%v", _: .}::/}`;
                        let params = pathvars >> $`${go.asVariableName(.('name').s)}`;
                        $`u, err := url.Parse(fmt.Sprintf("%s${formatArgs}", basePath, ${params::, }))`
                    }
                    if err != nil {
                        panic(err)
                    }

                    ${let queryParams = ep('restParams')('queryParam')?.a:{}; cond {queryParams:
                        let reqQueryParams = queryParams where !.@item('type')('opt')?.b:false;
                        let optQueryParams = queryParams where .@item('type')('opt')?.b:false;
                        let queryParamName = \qparam cond {
                            'queryParamNames' <: qparam('attrs')?:{}:
                                $"${//seq.concat(qparam('attrs')?('queryParamNames'):{} where (qparam.name <: .) >> (. &~ {qparam.name}))::}",
                            _: qparam('name').s,
                        };
                        let var = \. $`${go.asVariableName(.('name').s)}`;
                        $`
                            q := u.Query()
                            ${reqQueryParams => .@item orderby sysl.source(.('type')) >> $`
                                q = convert.EncodeQueryParam(q, "${queryParamName(.)}", ${var(.)})
                            `::\i}
                            ${optQueryParams => .@item orderby sysl.source(.('type')) >> $`
                                if ${var(.)} != nil {
                                    q = convert.EncodeQueryParam(q, "${queryParamName(.)}", *${var(.)})
                                }
                            `::\i}
                            u.RawQuery = q.Encode()
                        `
                    }}

                    return &${testType}{
                        e: t.e,
                        tc: e2e.TestCall2{
                            Method: "${ep('restParams')('method').s}",
                            URL:    u.String(),
                        },
                    }
                }

                func (t *${testType}) WithHeaders(headers map[string]string) *${testType} {
                    t.tc.Headers = headers

                    return t
                }

                ${
                    (ep('param')?.a:{}) where "body" <: sysl.patterns(.@item('type')) >> go.bodyType(module, app, .('type')) >>
                    $`
                        func (t *${testType}) WithBody(body ${.}) *${testType} {
                            ${cond . {
                                '[]byte': `t.tc.Body = body`,
                                'string': `t.tc.Body = ([]byte)(body)`,
                                _: `t.tc.Body, _ = json.Marshal(body)`,
                            }}

                            return t
                        }

                        func (t *${testType}) WithBodyPlain(body []byte) *${testType} {
                            t.tc.Body = body

                            return t
                        }
                    `
                ::\i}

                func (t *${testType}) ExpectResponseCode(code int) *${testType} {
                    t.tc.ExpectedCode = &code

                    return t
                }

                func (t *${testType}) ExpectResponseHeaders(headers map[string]string) *${testType} {
                    t.tc.TestRespFns = append(t.tc.TestRespFns, e2e.ExpectResponseHeaders(headers))

                    return t
                }

                func (t *${testType}) ExpectResponseHeadersExist(headers []string) *${testType} {
                    t.tc.TestRespFns = append(t.tc.TestRespFns, e2e.ExpectResponseHeadersExist(headers))

                    return t
                }

                func (t *${testType}) ExpectResponseHeadersDoNotExist(headers []string) *${testType} {
                    t.tc.TestRespFns = append(t.tc.TestRespFns, e2e.ExpectResponseHeadersDoNotExist(headers))

                    return t
                }

                func (t *${testType}) ExpectResponseHeadersExistExactly(headers []string) *${testType} {
                    t.tc.TestRespFns = append(t.tc.TestRespFns, e2e.ExpectResponseHeadersExistExactly(headers))

                    return t
                }

                ${{}# TODO: Add typed versions based on the specifications eg, Expect200ResponseBody
                }
                func (t *${testType}) ExpectResponseBody(body interface{}) *${testType} {
                    switch body := body.(type) {
                    case []byte:
                        t.tc.ExpectedBody = body
                    case string:
                        t.tc.ExpectedBody = []byte(body)
                    default:
                        var err error
                        bodyMarshalled, err := json.Marshal(body)
                        if err != nil {
                            panic(fmt.Sprintf("Failed to convert body: %v", err))
                        }
                        t.tc.ExpectedBody = bodyMarshalled
                    }

                    return t
                }

                func (t *${testType}) TestResponseCode(testCodeFn func(t syslgo.TestingT, actual int)) *${testType} {
                    t.tc.TestCodeFn = testCodeFn

                    return t
                }

                func (t *${testType}) TestResponseBody(testBodyFn func(t syslgo.TestingT, actual []byte)) *${testType} {
                    t.tc.TestBodyFn = testBodyFn

                    return t
                }

                func (t *${testType}) Send() {
                    t.e.Do2(t.tc)
                }
            `
        ::\i}

        ${nonRestEndpoints >> \(@value: ep, ...)
            let methodInfo = go.pbMethodInfo(module, app, ep);
            let name = methodInfo.name;
            let requestType = methodInfo.requestType;
            let responseType = methodInfo.responseType;

            let testType = $`${name}Test`;

            $`
                type ${testType} struct {
                    t      syslgo.TestingT
                    client pb.${goAppname}Client

                    ctx       context.Context
                    req       *pb.${requestType}
                    res       *pb.${responseType}
                    err       error
                    testResFn func(t syslgo.TestingT, actual *pb.${responseType}, err error)
                }

                func (t *TestServer) ${name}() *${testType} {
                    return &${testType}{
                        ctx:    context.Background(),
                        t:      t.e.T(),
                        client: t.client,
                    }
                }

                func (t *${testType}) WithRequest(req *pb.${requestType}) *${testType} {
                    t.req = req

                    return t
                }

                func (t *${testType}) WithContext(ctx context.Context) *${testType} {
                    t.ctx = ctx

                    return t
                }

                func (t *${testType}) ExpectResponse(res *pb.${responseType}) *${testType} {
                    t.res = res

                    return t
                }

                func (t *${testType}) ExpectError(err error) *${testType} {
                    t.err = err

                    return t
                }

                func (t *${testType}) TestResponse(testResFn func(t syslgo.TestingT, actualResponse *pb.${responseType}, err error)) *${testType} {
                    t.testResFn = testResFn

                    return t
                }

                func (t *${testType}) Send() {
                    require.NotNil(t.t, t.req, "Need to call WithRequest before Send")

                    response, err := t.client.${name}(t.ctx, t.req)
                    if t.err != nil {
                        require.Error(t.t, err)
                        require.EqualError(t.t, err, t.err.Error())
                    }
                    if t.res != nil {
                        require.NoError(t.t, err)
                        require.True(t.t, proto.Equal(t.res, response), "Responses not equal!\nExpected: %s\nActual: %s", t.res.String(), response.String())
                    }
                    if t.testResFn != nil {
                        t.testResFn(t.t, response, err)
                    }
                }
            `
        ::\i}
    `
