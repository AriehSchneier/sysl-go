let go = //{./go};
let sysl = //{./sysl};

\(:app, ...) \(:outDir, :subDir)
    let package = go.package(app);
    let type =
        let patterns = sysl.patterns(app);
        cond {'temporal' <: patterns: 'Temporal', 'gRPC' <: patterns: 'Grpc'};
    let goModFileName = "go.mod"; # go.mod is assumed to exist in current working directory.

    $'
        package main

        import (
            "context"

            "github.com/anz-bank/sysl-go/core"

            "${go.goMainModulePath(goModFileName)}/${subDir}internal/gen/pkg/servers/${outDir}"
        )

        type AppConfig struct {
            // Define app-level config fields here.
        }

        func main() {
            ${package}.Serve(context.Background(),
                func(ctx context.Context, config AppConfig) (*${package}.${type}ServiceInterface, *core.Hooks, error) {
                    // Perform one-time setup based on config here.
                    return &${package}.${type}ServiceInterface{
                        // Add handlers here.
                    }, nil, nil
                },
            )
        }

    '
