let go = //{./go};

\(:app, :appname, :basepath, :clientDeps, :endpoints, :fixPBPath, ...)
    let methodInfos = endpoints => \(@:_, @item: (@:_, @value: ep)) go.pbMethodInfo(ep);
    let appname = //str.title(appname);

    # TODO: sysl automapping between sysl types and protobuf types
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | go.pbPackage(app))}

        ${(methodInfos => .requestType) | (methodInfos => .responseType) => $`
            type ${.} = pb.${.}
        ` orderby .::\i:\n}

        // Service interface for ${appname}.
        type Service interface {
            ${methodInfos => $`${.name}${.sig('pb', true)}` orderby .::\i}
        }

        // Client implements a client for ${appname}.
        type Client struct {
            client pb.${appname}Client
        }

        // NewClient creates a new Client.
        func NewClient(conn *grpc.ClientConn) *Client {
            return &Client{pb.New${appname}Client(conn)}
        }

        ${methodInfos => $`
            // ${.name} ...
            func (s *Client) ${.name}${.sig('pb', true)} {
                return s.client.${.name}(ctx, ${.pname}, opts...)
            }
        ` orderby .:::}
    `
