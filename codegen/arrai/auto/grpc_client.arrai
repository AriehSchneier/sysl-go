let go = //{./go};
let grpc = //{./grpc};

\(:app, :appname, :basepath, :clientDeps, :endpoints, :fixPBPath, ...)

    # These are old definitions used prior to deb7738294f04d6628c07db08d5ba92367186c38
    let methodInfos = endpoints => \(@:_, @item: (@:_, @value: ep)) go.pbMethodInfo(app, ep);
    let appname = go.name(grpc.app.name(app));

    # FIXME this methodSig definition added in deb7738294f04d6628c07db08d5ba92367186c38 is unused
    # let methodSig = \ep
    #     let {'name': (s: name), 'param': (a: [param]), 'stmt': (a: stmts), ...} = ep;
    #     let {'name': (s: pname), 'type': ptype, ...} = param;
    #     let rparam = $`${stmts
    #         filter .@item {{'ret': _, ...}: .}
    #         >> //seq.split(".", //seq.split(" ", .("ret")("payload").s)(2))(1)
    #     ::}`;
    #     $`${name}(ctx context.Context, ${pname} *pb.${go.leafType(app, ptype)}) (*pb.${rparam}, error)`;

    # FIXME this pbPath definition added in deb7738294f04d6628c07db08d5ba92367186c38 breaks the gRPC smoke test and is unused
    # let pbPath = fixPBPath(app('attrs')('source_path').@value.s);

    # TODO: sysl automapping between sysl types and protobuf types
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | {go.pbImport(app)})}

        ${(methodInfos => .requestType) | (methodInfos => .responseType) => $`
            type ${.} = pb.${.}
        ` orderby .::\i:\n}

        // Service interface for ${appname}.
        type Service interface {
            ${methodInfos => $`${.name}${.sig('pb', true)}` orderby .::\i}
        }

        // Client implements a client for ${appname}.
        type Client struct {
            client pb.${appname}Client
        }

        // NewClient creates a new Client.
        func NewClient(conn *grpc.ClientConn) *Client {
            return &Client{pb.New${appname}Client(conn)}
        }

        ${methodInfos => $`
            // ${.name} ...
            func (s *Client) ${.name}${.sig('pb', true)} {
                return s.client.${.name}(ctx, ${.pname}, opts...)
            }
        ` orderby .:::}
    `
