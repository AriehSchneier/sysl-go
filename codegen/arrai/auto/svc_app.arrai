let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :basepath, :clientDeps, :module, :goModule, :restEndpoints, ...)
    let prefix = \dep
        let depModule = goModule.depField(dep);
        cond {
            depModule.temporal: `Temporal`,
            depModule.grpc: `GRPC`,
            _: `HTTP`,
        }
    ;
    let serverType =
        let patterns = sysl.patterns(app);
        cond {`temporal` <: patterns: `Temporal`, "gRPC" <: patterns: `Grpc`}
    ;
    let serviceInterface = $`${serverType}ServiceInterface`;
    let newServiceHandler = $`New${serverType}ServiceHandler`;
    let package = go.package(app);
    let serviceDeps = clientDeps where .isService;
    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}

        // DownstreamClients for ${appname}
        type DownstreamClients struct {
            ${serviceDeps orderby . >> $`${.import}Client *${.import}.Client`::\i}
        }

        // BuildDownstreamClients ...
        func BuildDownstreamClients(ctx context.Context, hooks *core.Hooks) (*DownstreamClients, error) {
            cfg := config.GetDefaultConfig(ctx)
            downstreamConfig := cfg.GenCode.Downstream.(*DownstreamConfig)
            if downstreamConfig == nil {
                downstreamConfig = &DownstreamConfig{}
            }
            var err error
            ${serviceDeps orderby . >>

            let depField = goModule.depField(.);
            $`
                ${
                    cond {
                        depField.grpc || depField.temporal:
                            $`
                                ${.import}${prefix(.)}Client, err := core.BuildDownstream${prefix(.)}Client(
                            `,
                        _:
                            $`
                                ${.import}${prefix(.)}Client, ${.import}${prefix(.)}URL, err := core.BuildDownstream${prefix(.)}Client(
                            `,
                    }
                }
                    ctx,
                    ${.import:q},
                    hooks,
                    &downstreamConfig.${go.name(.import)},
                )
                if err != nil {
                    return nil, err
                }
                ${
                    cond {
                        depField.grpc || depField.temporal:
                            $`
                                ${.import}Client := ${.import}.NewClient(${.import}${prefix(.)}Client)
                            `,
                        _:
                            $`
                                ${.import}Client := &${.import}.Client{
                                    Client:  ${.import}${prefix(.)}Client,
                                    URL:     ${.import}${prefix(.)}URL,
                                    Headers: downstreamConfig.${go.name(.import)}.Headers,
                                }
                            `,
                    }
                }
            `::\i\n:\n}
            return &DownstreamClients{
                ${serviceDeps orderby . >> $`${.import}Client: ${.import}Client,`::\i}
            }, err
        }

        // Serve starts the server.
        //
        // createService must be a function with the following signature:
        //
        //    func(ctx context.Context, config AppConfig) (*${package}.ServiceInterface, *core.Hooks, error)
        //
        // where AppConfig is a type defined by the application programmer to
        // hold application-level configuration.
        //
        // For a quick start, copy main.go.sample from the same directory as this
        // file into its own package directory, rename it to main.go, and run it.
        func Serve${serverType = `Temporal` && `[T any]`}(
            ctx context.Context,
            createService ${
                cond serverType {
                    'Temporal': `func(context.Context, T) (*TemporalServiceInterface, *core.Hooks, error)`,
                    _: 'interface{}',
                }
            },
        ) {
            srv, err := ${
                cond serverType {
                    `Temporal`:
                        $`
                            core.NewTemporalWorker[*TemporalServiceHandler](
                                ctx,
                                TaskQueueName,
                                &DownstreamConfig{},
                                createService,
                                BuildDownstreamClients,
                                NewTemporalServiceHandler,
                            )
                        `,
                    _: 'NewServer(ctx, createService)'
                }
            }
            switch err.(type) {
                case core.ErrDisplayHelp:
                    return
                case nil:
                    signalChan := make(chan os.Signal, 1)
                    signal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM)

                    errChan := make(chan error, 1)
                    go func() {
                        defer func() {
                            if r := recover(); r != nil {
                                errChan <- fmt.Errorf("Server panic: %v", r)
                            }
                        }()

                        errChan <- srv.Start()
                    }()

                    select {
                    case <-signalChan:
                        err = srv.GracefulStop()
                    case err = <-errChan:
                    }
            }

            if err != nil {
                log.Fatal(err)
            }
        }

        ${serverType != 'Temporal' && $`
            // NewServer creates a new application server.
            //
            // createService must be a function with the following signature:
            //
            //    func(ctx context.Context, config AppConfig) (*${package}.ServiceInterface, *core.Hooks, error)
            //
            // where AppConfig is a type defined by the application programmer to
            // hold application-level configuration.
            func NewServer(
                ctx context.Context,
                createService interface{},
            ) (core.StoppableServer, error) {
                return core.NewServer(
                    ctx,
                    &DownstreamConfig{}, createService, &${serviceInterface}{},
                    func(
                        ctx context.Context,
                        serviceIntf interface{},
                        hooks *core.Hooks,
                    ) (core.Manager, *core.GrpcServerManager, error) {
                        serviceInterface := serviceIntf.(*${serviceInterface})
                        cfg := config.GetDefaultConfig(ctx)

                        if hooks == nil {
                            hooks = &core.Hooks{}
                        }

                        var downstream *DownstreamConfig
                        var is bool
                        if downstream, is = cfg.GenCode.Downstream.(*DownstreamConfig); !is || downstream == nil {
                            downstream = &DownstreamConfig{}
                        }
                        if downstream.ContextTimeout == 0 {
                            downstream.ContextTimeout = 30 * time.Second
                        }

                        genCallbacks := common.NewCallbackV3(
                            &cfg.GenCode,
                            downstream.ContextTimeout,
                            hooks.MapError,
                            hooks.WriteError,
                            hooks.AddHTTPMiddleware,
                        )

                        ${cond {serviceDeps: $`
                            clients, err := BuildDownstreamClients(ctx, hooks)
                            if err != nil {
                                return nil, nil, err
                            }
                        `}}
                        serviceHandler, err := ${newServiceHandler}(
                            ctx,
                            hooks,
                            genCallbacks,
                            serviceInterface,
                            ${serviceDeps orderby . >> $`clients.${.import}Client,`::\i}
                        )
                        if err != nil {
                            return nil, nil, err
                        }

                        // Construct a GrpcServerManager to wrap our serviceHandler.
                        var grpcPublicServerConfig *config.GRPCServerConfig = &cfg.GenCode.Upstream.GRPC

                        // Here we allow the grpc.ServerOption configuration to be optionally extended or overridden.
                        // See the documentation of core.Hooks for more information.
                        grpcServerOptions, err := core.ResolveGrpcServerOptions(ctx, hooks, grpcPublicServerConfig)
                        if err != nil {
                            return nil, nil, err
                        }

                        // TODO make it possible to disable handlers through configuration.
                        enabledGrpcHandlers := []handlerinitialiser.GrpcHandlerInitialiser{}

                        ${cond serverType {
                            `Grpc`: $`
                                enabledGrpcHandlers = append(enabledGrpcHandlers, serviceHandler)
                            `,
                            _: $`
                            `,
                        }}

                        grpcManager := core.GrpcServerManager{
                            GrpcServerOptions:      grpcServerOptions,
                            EnabledGrpcHandlers:    enabledGrpcHandlers,
                            GrpcPublicServerConfig: grpcPublicServerConfig,
                        }

                        libraryConfig := &(cfg.Library)
                        var adminServerConfig *config.CommonHTTPServerConfig = nil
                        if cfg.Admin != nil {
                            adminServerConfig = &cfg.Admin.HTTP
                        }
                        var publicServerConfig *config.UpstreamConfig = nil
                        // TODO make it possible to disable handlers through configuration.
                        enabledHandlers := []handlerinitialiser.HandlerInitialiser{}

                    ${cond serverType {
                            `Grpc`: $`
                            `,
                            _: $`
                                // Construct a HTTPManager to wrap our HandlerInitialiser AKA ServiceRouter.
                                // TODO standardise terminology / generally refactor.
                                handlerInitialiser := NewServiceRouter(genCallbacks, serviceHandler)
                                enabledHandlers = append(enabledHandlers, handlerInitialiser)
                                publicServerConfig = &(cfg.GenCode.Upstream)
                            `,
                        }}
                        restManager := core.NewHTTPManagerShim(libraryConfig, adminServerConfig, publicServerConfig, enabledHandlers, hooks.AddAdminHTTPMiddleware)
                        return restManager, &grpcManager, nil
                    },
                )
            }
        `}

    `
