let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :basepath, :clientDeps, :clientDeps, :module, :goModule, :restEndpoints, ...)
    let prefix = \dep cond {goModule.depField(dep).grpc: `GRPC`, _: `HTTP`};
    let grpc = cond {"gRPC" <: sysl.patterns(app): `Grpc`};
    let serviceInterface = $`${grpc}ServiceInterface`;
    let newServiceHandler = $`New${grpc}ServiceHandler`;
    let package = go.package(app);
    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}

        // DownstreamClients for ${appname}
        type DownstreamClients struct {
            ${clientDeps orderby . >> $`${.import}Client *${.import}.Client`::\i}
        }

        ${cond {
            grpc: $`
                // BuildGrpcHandlerInitialiser ...
                func BuildGrpcHandlerInitialiser(
                    serviceInterface GrpcServiceInterface,
                    callback core.GrpcGenCallback,
                    downstream *DownstreamClients,
                ) (handlerinitialiser.GrpcHandlerInitialiser, error) {
                    return NewGrpcServiceHandler(
                        callback,
                        &serviceInterface,
                        ${clientDeps orderby . >> $`downstream.${.import}Client,`::\i}
                    )
                }
            `,
            _: $`
                // BuildRestHandlerInitialiser ...
                func BuildRestHandlerInitialiser(
                    serviceInterface ${serviceInterface},
                    callback core.RestGenCallback,
                    downstream *DownstreamClients,
                ) (handlerinitialiser.HandlerInitialiser, error) {
                    serviceHandler, err := NewServiceHandler(
                        callback,
                        &serviceInterface,
                        ${clientDeps orderby . >> $`downstream.${.import}Client,`::\i}
                    )
                    if err != nil {
                        return nil, err
                    }
                    return NewServiceRouter(callback, serviceHandler), nil
                }
            `,
        }}

        // BuildDownstreamClients ...
        func BuildDownstreamClients(cfg *config.DefaultConfig) (*DownstreamClients, error) {
            downstreamConfig := cfg.GenCode.Downstream.(*DownstreamConfig)
            if downstreamConfig == nil {
                downstreamConfig = &DownstreamConfig{}
            }
            var err error
            ${clientDeps orderby . >> $`
                ${.import}${prefix(.)}Client, err := core.BuildDownstream${prefix(.)}Client(
                    ${.import:q},
                    &downstreamConfig.${go.name(.import)},
                )
                if err != nil {
                    return nil, err
                }
                ${cond {
                    goModule.depField(.).grpc:
                        $`
                            ${.import}Client, err := ${.import}.NewClient(${.import}${prefix(.)}Client)
                            if err != nil {
                                return nil, err
                            }
                        `,
                    _:
                        $`
                            ${.import}Client := &${.import}.Client{
                                Client:  ${.import}${prefix(.)}Client,
                                URL:     downstreamConfig.${go.name(.import)}.ServiceURL,
                                Headers: downstreamConfig.${go.name(.import)}.Headers,
                            }
                        `,
                }}
            `::\i\n:\n}
            return &DownstreamClients{
                ${clientDeps orderby . >> $`${.import}Client: ${.import}Client,`::\i}
            }, err
        }

        // Serve starts the server.
        //
        // createService must be a function with the following signature:
        //
        //    func(ctx context.Context, config AppConfig) (*${package}.ServiceInterface, *core.RestCallback, error)
        //
        // where AppConfig is a type defined by the application programmer to
        // hold application-level configuration.
        //
        // For a quick start, copy main.go.sample from the same directory as this
        // file into its own package directory, rename it to main.go, and run it.
        func Serve(
            ctx context.Context,
            createService interface{},
        ) error {
            err := core.Serve(
                ctx,
                &DownstreamConfig{}, createService, &${serviceInterface}{},
                func(
                    cfg *config.DefaultConfig,
                    serviceIntf interface{},
                    callback *core.RestCallback,
                ) (interface{}, error) {
                    serviceInterface := serviceIntf.(*${serviceInterface})

                    genCallbacks := config.NewCallback(
                        &cfg.GenCode,
                        cfg.GenCode.Downstream.(*DownstreamConfig).ContextTimeout,
                        callback.MapError,
                    )

                    ${cond {clientDeps: $`
                        clients, err := BuildDownstreamClients(cfg)
                        if err != nil {
                            return nil, err
                        }
                    `}}
                    serviceHandler, err := ${newServiceHandler}(
                        genCallbacks,
                        serviceInterface,
                        ${clientDeps orderby . >> $`clients.${.import}Client,`::\i}
                    )
                    if err != nil {
                        return nil, err
                    }

                    ${cond {
                        grpc: $`
                            // Construct a GRPCManager to wrap our handlerInitialiser AKA serviceHandler.
                            // TODO standardise terminology / generally refactor.
                            handlerInitialiser := serviceHandler

                            interceptors := make([]grpc.UnaryServerInterceptor, 0) // TODO make configurable
                            var adminServerConfig *config.CommonServerConfig // TODO make configurable
                            var publicServerConfig *config.CommonServerConfig = &cfg.GenCode.Upstream.GRPC
                            // TODO make it possible to disable handlers through configuration.
                            enabledHandlers := []handlerinitialiser.GrpcHandlerInitialiser{handlerInitialiser}
                            manager := core.NewGRPCManagerShim(interceptors, adminServerConfig, publicServerConfig, enabledHandlers)
                            return manager, nil
                        `,
                        _: $`
                            // Construct a HTTPManager to wrap our HandlerInitialiser AKA ServiceRouter.
                            // TODO standardise terminology / generally refactor.
                            handlerInitialiser := NewServiceRouter(genCallbacks, serviceHandler)

                            libraryConfig := &(cfg.Library)
                            var adminServerConfig *config.CommonHTTPServerConfig // TODO make configurable
                            var publicServerConfig *config.CommonHTTPServerConfig = &(cfg.GenCode.Upstream.HTTP)
                            // TODO make it possible to disable handlers through configuration.
                            enabledHandlers := []handlerinitialiser.HandlerInitialiser{handlerInitialiser}
                            manager := core.NewHTTPManagerShim(libraryConfig, adminServerConfig, publicServerConfig, enabledHandlers)
                            return manager, nil
                        `,
                    }}
                },
            )
            if err != nil {
                log.Print(err)
            }
            return err
        }
    `
