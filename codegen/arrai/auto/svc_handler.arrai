let go = //{./go};
let sysl = //{./sysl};
let validation = //{./validation};

\(:app, :appname, :basepath, :clientDeps, :goModule, :hasDB, :module, :restEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let dbimport = cond {hasDB: {(alias: "_", package: "github.com/mattn/go-sqlite3")}};
    let authorizationRule = \ep cond ep {
        {'attrs': {'authorization_rule': {'s': (s: rule), ...}, ...}, ...} : rule,
    };
    let validateApp = sysl.patterns(app) & {"validate"};
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | dbimport)}

        ${
            (app('types')?:{} where "error" <: sysl.patterns(.@value) orderby .@) >>> \i \.
                let typename = go.name(.@);
                $`
                    // *${typename} error
                    var ${typename} common.CustomError = map[string]string{
                        "name": "${typename}",
                        ${.@value('tuple')('attrDefs') orderby .@ >> $`"${.@}": "${.@value('attrs')('value')('s').s}",`::\i}
                    }
                `
        :::\n}
        // Handler interface for ${appname}
        type Handler interface {
            ${restEndpoints >> $`${go.methodName(app, .@value)}Handler(w http.ResponseWriter, r *http.Request)`::\i}
        }

        // ServiceHandler for ${appname} API
        type ServiceHandler struct {
            genCallback      core.RestGenCallback
            serviceInterface *ServiceInterface
            authorizationRules  map[string]authrules.Rule
            ${cond {hasDB: $`DB *sql.DB`}}
            ${clientDeps orderby . >> (goModule.depField(.) -> $`${.name} ${.type}`)::\i}
        }

        // NewServiceHandler for ${appname}
        func NewServiceHandler(
            ctx context.Context,
            hooks *core.Hooks,
            genCallback core.RestGenCallback,
            serviceInterface *ServiceInterface,
            ${clientDeps orderby . >> $`${.import}${go.name(.import)}Service ${.import}.Service,`::\i}
        ) (*ServiceHandler, error) {
            ${cond {hasDB: $`
                db, dberr := database.GetDBHandle()
                if dberr != nil {
                        return nil, dberr
                }
            `}}

            authorizationRules := make(map[string]authrules.Rule)
            ${restEndpoints >> \(@value: ep, ...)
                let method = go.methodName(app, ep);
                let ruleExpression = authorizationRule(ep);
                cond {authorizationRule(ep): $`
                    authRule${method}, authRuleErr := core.ResolveRESTAuthorizationRule(ctx, hooks, "${method}", ${"`"++ruleExpression++"`"})
                    if authRuleErr != nil {
                        return nil, authRuleErr
                    }
                    authorizationRules["${method}"] = authRule${method}
                `}
            ::}

            return &ServiceHandler{
                genCallback,
                serviceInterface,
                authorizationRules,
                ${cond {hasDB: $`db,`}}
                ${clientDeps orderby . >> $`${.import}${go.name(.import)}Service,`::\i}
            }, nil
        }

        ${restEndpoints >> \(@value: ep, ...)
            let method = go.methodName(app, ep);
            let returns = sysl.endpoint.normalReturns(app, ep) >> (
                let returnType = .type(.type count - 1);
                # If there are multiple response codes that have the same return type then just pick 1 'at random' as we can't tell which code the handler actually wanted.
                # This is due to the fact that the handler signiature only returns the type and not the status.
                # In those cases the handler should set the code before returning (using common.UpdateResponseStatus(...)).
                # eg with the below snippet, if a Pong is returned from the handler we don't know if they meant 201 or 202:
                #     return 201 <: Pong [mediatype="application/json;charset=UTF-8"]
                #     return 202 <: Pong [mediatype="application/json"]
                let codeAndMediaType = (.codeAndMediaType orderby .)(0);
                let respContentType = codeAndMediaType.mediatype || cond go.baseType(app, returnType, app('types')?:{}) || returnType {
                    'bytes': 'application/octet-stream',
                    '[]byte': 'application/octet-stream',
                    'string': 'text/plain',
                    _: 'application/json'
                };
                let varName = go.asVariableName(returnType);
                let code = codeAndMediaType.code || 'http.StatusOK';
                (:returnType, :respContentType, :varName, :code)
            );
            let urlParams = ep('restParams')('urlParam')?.a:[];
            let queryParams = ep('restParams')('queryParam')?.a:[];
            let headerParams = ep('param')?.a:{} where {'header'} (<=) sysl.patterns(.@item('type'));
            let reqQueryParams =
                queryParams where !.@item('type')('opt')?.b:false
                >> (. | {'goType': go.type(app, .('type'))});
            let optQueryParams =
                queryParams where .@item('type')('opt')?.b:false
                    orderby sysl.source(.@item('type'))
                    >> \(@item: {'name': (s: name), 'type': type, ...}, ...)
                        (
                            :name,
                            :type,
                            var: $`${go.name(name)}Param`,
                        );

            $`
                // ${method}Handler ...
                func (s *ServiceHandler) ${method}Handler(w http.ResponseWriter, r *http.Request) {
                    if s.serviceInterface.${method} == nil {
                        common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError, s.genCallback.WriteError)
                        return
                    }

                    ctx := common.RequestHeaderToContext(r.Context(), r.Header)
                    ${cond {authorizationRule(ep): $`
                        if _, ok := s.authorizationRules["${method}"]; !ok {
                            common.HandleError(r.Context(), w, common.InternalError, "authorization rule for method ${method} not implemented", nil, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }
                        ctx, authorizationErr := s.authorizationRules["${method}"](ctx)
                        // TODO give HTTP-idiomatic 401 & 403 responses.
                        if authorizationErr != nil {
                            common.HandleError(ctx, w, common.UnauthorizedError, "Auth error", authorizationErr, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }
                    `}}
                    ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), 0)
                    var req ${method}Request
                    ${cond ep('restParams')('method').s {('POST', 'PUT', 'PATCH'):
                        let body = ep('param')?.a:{} where "body" <: sysl.patterns(.@item('type'));
                        let _ = cond {!body: //error($`POST, PUT and PATCH require a body, ${method} doesn't have a body!`)};
                        let goBodyType = body single -> go.bodyType(app, .@item('type'));
                        cond goBodyType {
                            '[]byte': $`
                                decodeBytes, decodeErr := ioutil.ReadAll(r.Body)
                                req.Request = decodeBytes
                            `,
                            'string': $`
                                decodeBytes, decodeErr := ioutil.ReadAll(r.Body)
                                req.Request = string(decodeBytes)
                            `,
                            _: $`
                                decoder := json.NewDecoder(r.Body)
                                decodeErr := decoder.Decode(&req.Request)
                            `
                        } ++ $`

                        if decodeErr != nil {
                            common.HandleError(ctx, w, common.BadRequestError, "Error reading request body", decodeErr, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }
                        `
                    }}
                    ${urlParams where .@item('type')('primitive')?.s:"" = "INT" >> \{'name': (s: name), ...}
                        $`req.${go.name(name)} = restlib.GetURLParamForInt(r, "${name}")`
                    ::\i:\n}
                    ${urlParams where .@item('type')('primitive')?.s:"" != "INT" >> \{'name': (s: name), ...}
                        $`req.${go.name(name)} = restlib.GetURLParam(r, "${name}")`
                    ::\i:\n}

                    ${reqQueryParams where .@item('type')('primitive')?.s:"" = "STRING" >> \{'name': (s: name), ...}
                        $`req.${go.name(name)} = restlib.GetQueryParam(r, "${name}")`
                    ::\i:\n}
                    ${
                        let params = \type \params cond {params: $`
                            var conv${type}Err error
                            ${params >> \{'name': (s: name), ...}
                                $`
                                    req.${go.name(name)}, conv${type}Err = restlib.GetQueryParamFor${type}(r, "${name}")
                                    if conv${type}Err != nil {
                                        common.HandleError(ctx, w, common.BadRequestError, "Invalid request", conv${type}Err, s.genCallback.MapError, s.genCallback.WriteError)
                                        return
                                    }
                                `
                            ::\i}

                        `};
                        $`
                            ${params('Int', reqQueryParams where .@item('goType') = "int64")}
                            ${params('Bool', reqQueryParams where .@item('goType') = "bool")}
                            ${params('Time', reqQueryParams where .@item('goType') = "convert.JSONTime")}
                        `
                    }
                    ${optQueryParams >> $`var ${.var} string`::\i\n:\n}
                    ${cond {optQueryParams: 'var convErr error'}}
                    ${optQueryParams >> $`${.var} = restlib.GetQueryParam(r, "${.name}")`::\i}
                    ${optQueryParams >>
                        let type = cond go.type(app, .type) {
                            "*bool": "BoolPtr",
                            "*int64": "IntPtr",
                            "*convert.JSONTime": "TimePtr",
                            _: "StringPtr",
                        };
                        $`
                            req.${go.name(.name)}, convErr = convert.StringTo${type}(ctx, ${.var})
                            if convErr != nil {
                                    common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError, s.genCallback.WriteError)
                                    return
                            }
                        `
                    ::\i}
                    ${headerParams >> \{'name': (s: name), 'type': type, ...}
                        let name = type('attrs')?('name')('s').s:name;
                        let required = sysl.type.required(type);
                        let regex = type('attrs')?('regex')?('s').s:{};
                        let validateTag = validation.validationTagForType(type);
                        let validate = validateApp && (regex || validateTag);
                        $`${cond {required || validate: $`${go.name(name)} := restlib.GetHeaderParam(r, "${name}")`}}
                        ${cond {required: $`
                            if ${go.name(name)} == "" {
                                common.HandleError(ctx, w, common.BadRequestError, "${name} header length is zero", common.NewZeroHeaderLengthError("${name}"), s.genCallback.MapError, s.genCallback.WriteError)
                                return
                            ${cond {!validate: $`}`}}
                        `}}${
                        cond {validate: $`
                            ${cond {
                                required: $`} else {`,
                                _: $`if ${go.name(name)} != "" {`,
                            }}${cond {
                                regex: $`
                                    re := common.RegexWithFallbackMustCompile(``${regex}``)
                                    if !re.MatchString(${go.name(name)}) {
                                        common.HandleError(ctx, w, common.BadRequestError, "${name} header does not fit the required regex", common.NewInvalidHeaderError("${name}", nil), s.genCallback.MapError, s.genCallback.WriteError)
                                        return
                                    }
                                `,
                                _: $`
                                    errs := validator.ValidateString(${go.name(name)}, ``${validateTag}``)
                                    if errs != nil {
                                        common.HandleError(ctx, w, common.BadRequestError, "${name} header does not fit the required validations", common.NewInvalidHeaderError("${name}", errs), s.genCallback.MapError, s.genCallback.WriteError)
                                        return
                                    }
                                `,
                            }}
                            }
                        `}}`
                    ::\i:\n}
                    ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
                    defer cancel()
                    valErr := validator.Validate(&req)
                    if valErr != nil {
                        common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError, s.genCallback.WriteError)
                        return
                    }

                    ${cond {hasDB: $`
                        conn, dberr := s.DB.Conn(ctx)
                        if dberr != nil {
                            common.HandleError(ctx, w, common.InternalError, "Database connection could not be retrieved", dberr, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }

                        defer conn.Close()
                        ${sysl.endpoint.sqlStatements(ep) => $`
                            ${.@}Stmt, dberr := conn.PrepareContext(ctx, ``${//seq.sub('\n', '\n\t\t', '\n'++.@value)}``)
                            if dberr != nil {
                                common.HandleError(ctx, w, common.InternalError, "could not parse the sql query with the name ${.@}", dberr, s.genCallback.MapError, s.genCallback.WriteError)
                                return
                            }
                        ` orderby .::\i}

                        tx, dberr := conn.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelSerializable})
                        if dberr != nil {
                            common.HandleError(ctx, w, common.DownstreamUnavailableError, "DB Transaction could not be created", dberr, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }
                    `}}
                    ${cond {client.notEmpty(ep): $`client := ${client.new(ep)}`}}

                    defer func() {
                        if rec := recover(); rec != nil {
                            ${cond {hasDB: $`
                                tx.Rollback()

                            `}}
                            var err error
                            switch rec := rec.(type) {
                            case error:
                                err = rec
                            default:
                                err = fmt.Errorf("Unknown error: %v", rec)
                            }
                            common.HandleError(ctx, w, common.InternalError, "Unexpected panic", err, s.genCallback.MapError, s.genCallback.WriteError)
                        }
                    }()
                    ${returns >> $`${.varName}, `::}err := s.serviceInterface.${method}(ctx, &req${cond {client.notEmpty(ep): `, client`}})
                    if err != nil {
                        ${cond {hasDB: $`tx.Rollback()`}}
                        common.HandleError(ctx, w, common.InternalError, "Handler error", err, s.genCallback.MapError, s.genCallback.WriteError)
                        return
                    }

                    ${cond {hasDB: $`
                        commitErr := tx.Commit()
                        if commitErr != nil {
                            common.HandleError(ctx, w, common.InternalError, "Failed to commit the transaction", commitErr, s.genCallback.MapError, s.genCallback.WriteError)
                            return
                        }
                    `}}

                    ${let types =
                        (returns where let t = app('types')?(.@item.returnType)?:{}; !({"error"} & sysl.patterns(t)) && {"tuple", "relation"} & (t => .@))
                        orderby .@ => .@item;
                    # validate that the response is valid
                    # if there are multiple types then only test those that are not nil
                    types >> \type $`
                        ${cond { returns count > 1: $`if ${type.varName} != nil {` }}
                            valErr = validator.Validate(${type.varName})
                            if valErr != nil {
                                ${cond {
                                    "permit_invalid_response" <: sysl.patterns(ep):
                                        'golog.Infof(ctx, "permitting invalid response: %v", valErr)',
                                    _: $`
                                        // Regard an invalid response object as an internal error.
                                        // To permit an endpoint to return invalid response objects, annotate the
                                        // endpoint with permit_invalid_response:
                                        //
                                        // App:
                                        //   ${ep('restParams')?('path')?.s?:'/foo/bar'} [~permit_invalid_response]
                                        common.HandleError(ctx, w, common.InternalError, "Invalid response", valErr, s.genCallback.MapError, s.genCallback.WriteError)
                                        return
                                        `
                                }}
                            }
                        ${cond { returns count > 1: $`}` }}
                    `::\i}

                    headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
                    if headermap.Get("Content-Type") == "" {
                        ${ cond {
                            returns count = 0:
                                $`
                                    headermap.Set("Content-Type", "application/json")
                                `,
                            returns count = 1 || (returns => .@item.respContentType) count = 1:
                                $`
                                    headermap.Set("Content-Type", "${returns(0).respContentType}")
                                `,
                            _:
                                $`${returns >> $`
                                if ${.varName} != nil {
                                    headermap.Set("Content-Type", "${.respContentType}")
                                }
                                `:: else }`
                        }}
                    }
                    if httpstatus == 0 {
                        ${ cond {
                            returns count = 0:
                                $`
                                    httpstatus = http.StatusOK
                                `,
                            returns count = 1 || (returns => .@item.code) count = 1:
                                $`
                                    httpstatus = ${returns(0).code}
                                `,
                            _:
                                $`${returns >> $`
                                if ${.varName} != nil {
                                    httpstatus = ${.code}
                                }
                                `:: else : else {httpstatus = http.StatusOK}}`
                        }}
                    }
                    restlib.SetHeaders(w, headermap)
                    restlib.SendHTTPResponse(w, httpstatus${(returns >> \type $`, ${
                        cond app('types')?(type.returnType)?:() {
                            {'primitive': (s: 'BYTES'), ...}: $"(*[]byte)(${type.varName})",
                            _: type.varName,
                        }
                    }`) || [', nil']:::})
                }
            `
        ::\i}
    `
