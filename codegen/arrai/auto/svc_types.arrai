let go = //{./go};
let sysl = //{./sysl};
let validation = //{./validation};

let orderedTypes = \types
    (types orderby .@) >> . +> (typename: go.name(.@));

let fieldJsonTag = \type \key
    cond type {
        {'attrs': {'json_tag': tag, ...}, ...}: [tag('s').s],
            _: [key],
    };

\(:app, :endpoints, :module, ...)
    let entities = orderedTypes(app('types')?:{} where !({"error"} & sysl.patterns(.@value)) && {"tuple", "relation"} & (.@value => .@));
    let aliases = orderedTypes(app('types')?:{} where !({'oneOf', 'oneof', 'tuple', 'relation'} & (.@value => .@)));
    let unions = orderedTypes(app('types')?:{} where ({'oneOf', 'oneof'} & (.@value => .@)));
    let validateApp = sysl.patterns(app) & {"validate"};
    $`
        ${go.prelude(app, {})}

        ${entities >> \(@: key, @value: value, :typename)
            let entity = value('tuple')?:(value('relation'));
            let patterns = sysl.patterns(value);
            $`
                // ${typename} ${cond value {{'attrs': {'description': {'s': (s: descr), ...}, ...}, ...}: descr, _: "..."}}
                type ${typename} struct {
                    ${entity('attrDefs') orderby .@ >> \(@: key, @value: attrDef)
                        let fieldName = go.name(key);
                        let jsonTag =
                            cond {
                                {"no_json", "pk"} & sysl.patterns(attrDef): ["-"],
                                _: fieldJsonTag(attrDef, key),
                            }
                            ++
                            (cond attrDef {
                                {'opt': (b: true), ...}: ['omitempty'],
                                _: [],
                            });
                        let validateTag =
                            cond attrDef {
                                {'attrs': {'validate': {'s': (s: tag), ...}, ...}, ...}: tag,
                                _: {},
                            };

                        # Purpose: add url field tags to support scenario where we need
                        # to marshal the structure into a HTTP request body for a
                        # application/x-www-form-urlencoded POST request.
                        #
                        # For each json field tag we define a url field tag with the
                        # same value. url field tags are intended to be interpreted by
                        # the library github.com/google/go-querystring.
                        #
                        # Copying across the json tags is a bit of a hack and may not work in
                        # general:
                        # 1. not all valid JSON field tags are valid url tags;
                        # 2. only a subset of go field types are supported when marshaling
                        #    into an application/x-www-form-urlencoded request body.
                        #
                        # Ref: https://pkg.go.dev/github.com/google/go-querystring@v1.0.0/query
                        # Ref: see restlib/restlib.go & restlib/urllencode.go
                        let urlTag = jsonTag;

                        let structTags = [$`json:"${jsonTag::,}"`]
                            ++ [$`url:"${urlTag::,}"`]
                            ++ cond { validateTag: [$`validate:"${validateTag}"`] };
                        $'
                        ${fieldName} ${go.type(attrDef)} `${//seq.join(' ', structTags)}`'
                    ::\i}
                }
                ${cond {typename <: go.errorReturnTypes(app): $`
                    // Error fulfills the error interface.
                    func (s ${typename}) Error() string {
                        type plain ${typename}
                        return fmt.Sprintf("%+v", plain(s))
                    }
                `}}
                ${
                    let reqParams = entity('attrDefs') where !sysl.isPtr(.@value) orderby .@ >> .@value;
                    cond {({"validate"} & patterns || validateApp) && reqParams: $`
                        func (t *${typename}) UnmarshalJSON(data []byte) error {
                            inner := struct {
                                ${entity('attrDefs') orderby .@ >> \(@: key, @value: attrDef)
                                    $'${go.name(key)} ${cond { !sysl.isPtr(attrDef) : '*', _ : ''}}${go.type(attrDef)} `json:"${fieldJsonTag(attrDef, key)::,},omitempty"`'
                                ::\i}
                            }{}
                            err := json.Unmarshal(data, &inner)
                            if err != nil {
                                return err
                            }
                            ${entity('attrDefs') where !sysl.isPtr(.@value) orderby .@ >> \(@: key, @value: attrDef)
                                $`
                                    if inner.${go.name(key)} == nil {
                                        return errors.New("${fieldJsonTag(attrDef, key)::,} cannot be nil")
                                    }
                                `
                            ::\i}
                            *t = ${typename}{
                                ${entity('attrDefs') orderby .@ >> \(@: key, @value: attrDef)
                                    let fieldName = go.name(key);
                                    $`${fieldName}: ${cond { !sysl.isPtr(attrDef) : '*', _ : ''}}inner.${fieldName},`
                                ::\i}
                            }
                            return nil
                        }
                    `}
                }
            `
        ::\i}
        ${entities where "json_map_key" <: (.@item.@value('attrs')?:{} => .@) >> \(@: key, ...) $`
            // Generate wrapper set type
            type ${key}Set struct {
                M map[string]${key}
            }

        `::\i}
        ${endpoints >> \(@value: ep, ...)
            let typename = $`${go.methodName(ep)}Request`;
            let paramTags = validation.paramValidateTags(ep) => (:.@, @value:$'`validate:"${.@value}"`');
            $`
                // ${typename} ...
                type ${typename} struct {
                    ${
                        (ep('param')?.a:{}) where "body" <: sysl.patterns(.@item('type')) >>
                            $`Request ${go.type(.('type'))}`
                    ::\i}
                    ${ep('restParams')?:{}
                        -> (.('queryParam')?.a:{}) ++ (.('urlParam')?.a:{})
                        orderby sysl.source(.@item('type'))
                        >>  let tags = paramTags(.@item('name').s)?:{};
                            $`${go.name(.@item('name').s)} ${go.type(.@item('type'))} ${tags}`
                    ::\i}
                }
            `
        ::\i}
        ${entities >> \(:typename, ...) $`
            // *${typename} validator
            func (s *${typename}) Validate() error {
                return validator.Validate(s)
            }
        `::\i}
        ${
            let json_mapped_entities =
                entities
                >> (. +> (
                        param: //str.lower(.typename),
                        json_map_key: .@value('attrs')?('json_map_key')?('s').s:"",
                    ))
                where .@item.json_map_key;
            $`
                ${json_mapped_entities >> $`
                    // *${.typename} add
                    func (s *${.typename}Set) Add(${.param} ${.typename}) {
                        s.M[${.param}.${.json_map_key}] = ${.param}
                    }
                `::\i}
                ${json_mapped_entities >> $`
                    // *${.typename} lookup
                    func (s *${.typename}Set) Lookup(${.json_map_key} string) ${.typename} {
                        return s.M[${.json_map_key}]
                    }
                `::\i}
            `
        }
        ${aliases where .@item.@ != "Empty" && !//seq.has_prefix("EXTERNAL_", .@item.@) >> $`
            // ${.typename} ...
            type ${.typename} ${go.type(.@value)}
        `::\i}
        ${aliases where .@item.@ = "Empty" >> $`
            // ${.typename} ...
            type ${.typename} struct {
            }
        `::\i}
        ${unions >> \(@: key, @value: value, :typename)
            let unionTypes = value('oneOf')('type').a >> .('typeRef')('ref')('path').a >> go.name((((.) single).@item).s);
            $`
            // ${typename} can be one of the following types at runtime:
            ${unionTypes >> $`// ${.}`::\i}
            type ${typename} interface {
                is${typename}()
            }
            ${unionTypes >> $`
                // is${typename} identifies ${.} as an instance of ${typename}
                func (i ${.}) is${typename}() {
                }
                `::\i}
        `::\i}
    `
