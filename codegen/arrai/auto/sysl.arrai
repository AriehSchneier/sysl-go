let isPtr = \t t('opt')?:false;

let statements = \x x('stmt')?.a?:[];

let patterns = \node node('attrs')?('patterns')?('a')('elt').a:{} >> .('s').s => .@item;

let splitAppName =
    let sub = //re.compile(`\s*::\s*`).sub('::');
    let split = //seq.split('::');
    \name split(sub(name))
;

# replaceArrayElement will replace the ith element in an array with val
let replaceArrayElement = \arr \i \val
    arr >>> \j \cur cond {j=i: val, _:cur};

let concatAppName = \name //seq.join(' :: ', name);

# flatten_statements(s : Statement) -> [Statement]
# flatten_statements performs a deep traversal of all trees of Statement discoverable
# inside the given Statement s, and returns a flattened array containing all of those
# Statement values. The resulting array contains the given Statement s itself.
# Here a Statement value is assumed to be encoded by running //encoding.json.decode
# over a JSON encoded Statement pb message. Refer to sysl.proto for how a Statement messsage is defined.
# Ref: https://github.com/anzx/sysl/blob/8bf5f024e2bcb0136cdc7cc9e9b8d8ddc79f4cd9/pkg/sysl/sysl.proto#L121-L136
let rec flatten_statements = \s

    # expand(s : Statement, tag : string) -> [Statement]
    # expand performs a deep traversal of all trees of Statements discoverable under the key
    # tag in the given Statement s and flattens them all into a single array of Statement.
    let expand = \s \tag //seq.concat((statements(s(tag))) >> flatten_statements(.));

    [s] ++
        # descend into any kind of Statement that might contain more Statements
        cond s {
            {'cond':_, ...} : expand(s, 'cond'),
            {'loop':_, ...} : expand(s, 'loop'),
            {'loop_n':_, ...} : expand(s, 'loop_n'),
            {'foreach':_, ...} : expand(s, 'foreach'),
            # alt is a special case as it does not directly contain child Statements but it contains grandchild Statements
            {'alt':_, ...} : //seq.concat( (s('alt')?('choice')?.a:[]) >> //seq.concat( statements(.) >> flatten_statements(.) ) ),
            {'group':_, ...} : expand(s, 'group'),
            _: [],
        };

let endpoint =
    # calls(ep) evaluates to a sparse array of all call Statement values found inside that endpoint.
    # This performs a deep traversal of statement trees, if any. Conditions are completely ignored,
    # e.g. a call shielded behind a conditional statement of the form "IF false: " is still included.
    # The result can be regarded as representing all calls that might conceivably occur.
    let calls = \ep
        //seq.concat( statements(ep) >> flatten_statements(.)) where cond .@item {{"call":_, ...}: true} >> .('call');

    # `returns(app, ep) -> array((var: string, type: array(string), seq: bool))`
    #
    # `returns` returns an array of returns from endpoint `ep` in app `app`. Each return is a
    # tuple with attribute `var` holding the variable name, attribute `type` holding the type name as
    # an array of the `.`-separate parts and the attribute `seq` which says whether its a sequence.
    # Note this regex should match (or use) parseReturn in github.com/anz-bank/sysl/pkg/arrai/sysl.arrai
    # (for now it uses the current regex with the intent of refactoring more at a later stage).
    let returns =
        let splitRet = //re.compile(`(.*?)\s*<:\s*((?:sequence\s+of\s+)?)(.*?)\s*((?:\[.*\])?)$`).match;
        let numRE = //re.compile(`^(\d)\d\d$`).match;
        let mediatype =
            let mTypeRE = //re.compile(`(?:^\[|,)\s*mediatype\s*=\s*(?:"([^"]*)"|'([^']*)')\s*(?:\]$|,)`).match;
            \attrs mTypeRE(attrs)(0)?:{} -> \res cond res count {2: (res where .@item rank (:.@))(1) } where .@char rank (:.@);
        \app \ep
            let res = (statements(ep) where "ret" <: (.@item => .@) >>
                let payload = .("ret")("payload").s;
                let [_, var, seq, type, attrs] = splitRet(payload)(0)?:["", payload, "", "", ""];
                let var = cond numRE(var) {
                    [[_, '2']]: (code: var, var: "ok"),
                    [[_, _]]: (code: var, var: "error"),
                    _: (code: {}, :var)
                };
                # if type is tagged as GeneratedOpenAPIResponse then get the type from its body
                let thisType = app('types')?(type rank (:.@))?:{};
                let followedType = cond {
                    'GeneratedOpenAPIResponse' <: patterns(thisType):
                        # the actual type is in the body param
                        thisType('tuple')('attrDefs')('body')('typeRef')('ref')('path').a(0).s
                };
                let type = app('types')?(followedType)?('typeRef')?('ref')('path').a(0).s:{} || followedType ||type;
                let mtype = followedType('attrs')?('mediatype')?('s').s:{} || mediatype(attrs);
                (var: var.var, seq: seq != "", type: //seq.split(".", type), mediatype: mtype, code: var.code)
            ) => .@item;
            # merge mediatype and code into a single entry so that we only have a single entry for each var/seq/type
            res => (:.var, :.seq, :.type) orderby . >>
                \v let filtered = res where (.var = v.var && .seq = v.seq && .type = v.type) => (:.code, :.mediatype);
                v +> (codeAndMediaType: filtered);

    # `normalReturns(app, ep)`
    #
    # `normalReturns` returns an array of non-error returns with a type from endpoint `ep`.
    let normalReturns = \app \ep
        returns(app, ep) where (.@item -> .var != "error" && .type != [""]) rank (:.@);

    let untypedReturns = \app \ep
        returns(app, ep) where (.@item -> .var = "ok" && .type = [""]) rank (:.@);

    # `returnPayload` takes the tuple structure of return and recreate the string payload.
    let returnPayload = \(:seq, :type, ...)
        (seq && `sequence of `) ++ (
            cond type count {
                2: $`${//seq.join(' :: ', splitAppName(type(0)))}.${type(1)}`,
                1: type(0),
                _: //error(type),
            }
        )
    ;

    let sqlStatements = \ep
        ep('attrs')?:{} where (//seq.has_prefix("sql_", .@)) => (
            @: //seq.trim_prefix("sql_", .@),
            @value: .@value('s').s,
        );
    let params = \ep ep('param')?.a:[];

    let epFromCall = \mod \{'target': {'part': (a: appname), ...}, 'endpoint': (s: epName), ...}
        let appname = concatAppName(appname >> .s);
        mod('apps', appname, 'endpoints', epName)?:{}
    ;

    let isRest = \ep ep('restParams')?:false;

    (
        :calls,
        :returns,
        :normalReturns,
        :returnPayload,
        :sqlStatements,
        :untypedReturns,
        :params,
        :epFromCall,
        :isRest,
    );

let source = \node node('sourceContext')('start') -> [.('line'), .('col')];

let type =

    # `required` returns whether or not the given type is required (true) or optional (false).
    # This method considers legacy behaviour that used the `optional` and `required` tags to mark
    # certain types as optional or required. Consider the following representations:
    # x <: string                   Required. Standard representation.
    # x <: string?                  Optional. Standard representation.
    # x <: string [~optional]       Optional. Legacy representation. Output from OpenAPI importer.
    # x <: string? [~required]      Optional. Potential legacy representation. Never supported.
    let required = \type
        cond {
            'opt' <: (type => .@): !type('opt').b,
            'optional' <: patterns(type): false,
            _: true
        };

    let primitives = {
        'decimal',
        'int',
        'float',
        'string',
        'string_8',
        'bool',
        'bytes',
        'date',
        'datetime',
    };

    # `guessType` returns a sysl type from a string representing a type.
    # This is mainly used for return types as returns are not parsed well usually.
    # It will try to detect primitives.
    # If it does not match any primitives, it will convert it into a typeRef.
    # If the type has has `.`, it is a full definition.
    # If not, it will assume that the provided app is the app where the type is referenced and will use the app as the path.
    let rec guessType = \app \typeStr
        cond {
            //str.lower(typeStr) <: primitives: {'primitive': (s: //str.upper(typeStr))},
            //seq.has_prefix('sequence of ', typeStr): {'sequence': guessType(//seq.trim_prefix('sequence of ', typeStr))},
            //seq.has_prefix('set of ', typeStr): {'set': guessType(//seq.trim_prefix('set of ', typeStr))},
            _:
                let splitted = //seq.split('.', typeStr);
                cond splitted count {
                    1: {'typeRef': {'ref': {'appname': {'part': app('name')('part')}, 'path': (a: [(s: splitted(0))])}}},
                    2: {'typeRef': {'ref': {
                        'appname': {'part': (a: splitAppName(splitted(0)) >> (s: .))},
                        'path': (a: [(s: splitted(1))])},
                    }},
                    _: //error($`invalid type: ${typeStr}`),
                }
        }
    ;
    (
        :required,
        :primitives,
        :guessType,
    );

let rec app = (
    name: \app $`${app('name')('part').a >> .s::}`,
    delimitedName: \app concatAppName(app('name')('part').a >> .s),
    endpoint: \app \epname ((app('endpoints') where .@value('name').s = epname) single).@value,
    # TODO: find more dependencies from other location e.g. types.
    dependenciesWithSource: \app
        let name = app('name', 'part');
        let fromEndpoints = app('endpoints')?:{} => \(@value: ep, ...)
            let fromCalls = (endpoint.calls(ep) => .@item('target')?:'');
            # repack into {'part': (a: [(s: _), ...])} because this structure is used
            let fromReturns = (endpoint.returns(app, ep) where ((.@item.type?:[] count) = 2)) => {
                'part': (a: splitAppName(.@item.type(0)) >> (s: .)),
            };
            let fromParams = endpoint.params(ep) filter .@item {
                {'typeRef': {'ref': {'appname': appname, ...}, ...}, ...}: appname
            };
            (fromCalls   => (src: 'call',   app: .)) |
            (fromReturns => (src: 'return', app: .)) |
            (fromParams  => (src: 'param',  app: .))
        ;
        //rel.union(fromEndpoints) where .app('part') != name,
    dependencies: \appConfig app.dependenciesWithSource(appConfig) => .app,
    fromAppName: \mod \{'part': (a: name), ...} mod('apps')(concatAppName(name >> .s))?:{},
);

(
    :app,
    :endpoint,
    :patterns,
    :source,
    :isPtr,
    :type,
    :replaceArrayElement,
    :splitAppName,
)
