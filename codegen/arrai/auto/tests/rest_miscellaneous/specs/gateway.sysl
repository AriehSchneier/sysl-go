import encoder_backend
import oneOf_backend.yaml as oneof_backend
import oneOf_gateway.yaml as Gateway
import empty_response.yaml as Gateway
import array_response.json as Gateway
import array_response_backend
import multi_contenttype_backend.yaml as multi_contenttype_backend

Gateway [package="gateway", ~vars_in_url_name]:
    @go_package = "gateway"
    @go_pb_package = "github.com/anz-bank/sysl-go/codegen/auto_tests/rest_miscellaneous"

    /ping/id:
        GET ?id=int:
            EncoderBackend <- GET /ping
            return ok <: Pong

    # should not conflict due to ~vars_in_url_name
    /ping/{id <: int}/id:
        GET:
            return ok <: Pong

    /something/external:
        GET:
            return ok <: Types.SomethingExternal

    !type Pong:
        identifier <: int

    /ping/binary:
        POST (GatewayBinaryRequestRequest <: GatewayBinaryRequest [mediatype="application/json", ~body]):
            return ok <: GatewayBinaryResponse

    !type GatewayBinaryRequest:
        content <: bytes

    !type GatewayBinaryResponse:
        content <: bytes

    !type TypeWithFullReference:
        content <: Gateway.PongString

    /fullreference:
        GET:
            return ok <: Gateway.TypeWithFullReference

    /ping-string/{s <: string}:
        GET:
            EncoderBackend <- GET /ping-string/{s}
            return ok <: PongString

    !type PongString:
        s <: string

    # testing multiple error returns compiles and multiple mediatypes respond correct type
    /ping/multi/{code <: int}:
        GET:
            return 200 <: Pong [mediatype="application/json;charset=UTF-8"]
            return 201 <: PongString
            return 202 <: PongString
            return 400 <: GatewayBinaryRequest
            return 500 <: GatewayBinaryResponse

    /ping/multi/{code <: int}/types:
        GET:
            return 200 <: Pong [mediatype="application/json;charset=UTF-8"]
            return 201 <: Pong [mediatype="application/json;charset=UTF-8"]
            return 202 <: PongString
            return 400 <: GatewayBinaryRequest
            return 500 <: GatewayBinaryRequest

    # testing PATH and mediatype
    /ping:
        PATCH (GatewayPatchRequestRequest <: GatewayPatchRequest [mediatype="application/json", ~body]):
            return 202 <: GatewayPatchResponse [mediatype="application/json;charset=UTF-8"]

    !type GatewayPatchRequest:
        content <: string

    !type GatewayPatchResponse:
        content <: string

    /rotate-one-of:
        POST:
            oneof_backend <- POST /rotate-one-of

    /ping/asyncDownstreams:
        GET ?id=int:
            EncoderBackend <- GET /ping
            multi_contenttype_backend <- POST /ping/multi:colon
            return ok <: Pong

    # test sending a body to a backend with multiple content types
    /ping-multi-content-backend/{s <: string}:
        GET:
            multi_contenttype_backend <- POST /ping/multi:colon
            multi_contenttype_backend <- POST /ping/multi:urlEncoded
            return ok <: PongString

    # test sending to a backend that returns an array
    /ping/array-response:
        GET:
            array_response_backend <- GET /array-response
            return 200 <: sequence of Res

    # test sending to a backend that returns an string
    /ping/string-response:
        GET:
            array_response_backend <- GET /string-response
            return 200 <: string

    # test sending to a backend that returns bytes
    /ping/bytes-response:
        GET:
            array_response_backend <- GET /bytes-response
            return 200 <: bytes

GatewayWithBff [package="gatewayWithBff"]:
    @basePath = "bff"
    @go_package = "gatewayWithBff"
    @go_pb_package = "github.com/anz-bank/sysl-go/codegen/auto_tests/rest_miscellaneous"

    /ping/binary:
        POST (GatewayBinaryRequestRequest <: GatewayBinaryRequest [mediatype="application/json", ~body]):
            return ok <: GatewayBinaryResponse

    /multi/responses:
        POST (code <: Code [mediatype="application/json", ~body]):
            Gateway <- GET /ping/multi/{code}
            Gateway <- GET /ping/multi/{code}/types
            return ok <: Types.SomethingExternal
            return 400 <: GatewayBinaryRequest
            return 500 <: GatewayBinaryResponse

    /multi/statuses:
        POST (code <: Code [mediatype="application/json", ~body]):
            Gateway <- GET /ping/multi/{code}/types
            return ok <: Types.SomethingExternal
            return error <: GatewayBinaryRequest

    !type GatewayBinaryRequest:
        content <: bytes

    !type GatewayBinaryResponse:
        content <: bytes

    !type Code:
        code <: int

Types:
    !type SomethingExternal:
        data <: string
