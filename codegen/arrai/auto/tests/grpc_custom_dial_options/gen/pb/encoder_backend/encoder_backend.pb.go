// Code generated by protoc-gen-go. DO NOT EDIT.
// source: encoder_backend.proto

package encoder_backend

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EncodingResponse struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncodingResponse) Reset()         { *m = EncodingResponse{} }
func (m *EncodingResponse) String() string { return proto.CompactTextString(m) }
func (*EncodingResponse) ProtoMessage()    {}
func (*EncodingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_880bcd04fc047373, []int{0}
}

func (m *EncodingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncodingResponse.Unmarshal(m, b)
}
func (m *EncodingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncodingResponse.Marshal(b, m, deterministic)
}
func (m *EncodingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodingResponse.Merge(m, src)
}
func (m *EncodingResponse) XXX_Size() int {
	return xxx_messageInfo_EncodingResponse.Size(m)
}
func (m *EncodingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EncodingResponse proto.InternalMessageInfo

func (m *EncodingResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type EncodingRequest struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncodingRequest) Reset()         { *m = EncodingRequest{} }
func (m *EncodingRequest) String() string { return proto.CompactTextString(m) }
func (*EncodingRequest) ProtoMessage()    {}
func (*EncodingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_880bcd04fc047373, []int{1}
}

func (m *EncodingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncodingRequest.Unmarshal(m, b)
}
func (m *EncodingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncodingRequest.Marshal(b, m, deterministic)
}
func (m *EncodingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodingRequest.Merge(m, src)
}
func (m *EncodingRequest) XXX_Size() int {
	return xxx_messageInfo_EncodingRequest.Size(m)
}
func (m *EncodingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EncodingRequest proto.InternalMessageInfo

func (m *EncodingRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*EncodingResponse)(nil), "encoder_backend.EncodingResponse")
	proto.RegisterType((*EncodingRequest)(nil), "encoder_backend.EncodingRequest")
}

func init() { proto.RegisterFile("encoder_backend.proto", fileDescriptor_880bcd04fc047373) }

var fileDescriptor_880bcd04fc047373 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xcd, 0x4b, 0xce,
	0x4f, 0x49, 0x2d, 0x8a, 0x4f, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x47, 0x13, 0x56, 0xd2, 0xe1, 0x12, 0x70, 0x05, 0x09, 0x65, 0xe6, 0xa5, 0x07,
	0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x70, 0xb1, 0x27, 0xe7, 0xe7, 0x95, 0xa4,
	0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xda, 0x5c, 0xfc, 0x08,
	0xd5, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0xb8, 0x15, 0x1b, 0xc5, 0x71, 0xf1, 0xb9, 0x42, 0x6c, 0x73,
	0x82, 0x58, 0x26, 0xe4, 0xc3, 0xc5, 0x1a, 0x94, 0x5f, 0x62, 0x68, 0x2c, 0xa4, 0xa0, 0x87, 0xee,
	0x3c, 0x34, 0x63, 0xa5, 0x14, 0xf1, 0xa8, 0x80, 0x38, 0x33, 0x89, 0x0d, 0xec, 0x25, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xeb, 0xfd, 0x5f, 0xeb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EncoderBackendClient is the client API for EncoderBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EncoderBackendClient interface {
	Rot13(ctx context.Context, in *EncodingRequest, opts ...grpc.CallOption) (*EncodingResponse, error)
}

type encoderBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewEncoderBackendClient(cc grpc.ClientConnInterface) EncoderBackendClient {
	return &encoderBackendClient{cc}
}

func (c *encoderBackendClient) Rot13(ctx context.Context, in *EncodingRequest, opts ...grpc.CallOption) (*EncodingResponse, error) {
	out := new(EncodingResponse)
	err := c.cc.Invoke(ctx, "/encoder_backend.EncoderBackend/Rot13", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncoderBackendServer is the server API for EncoderBackend service.
type EncoderBackendServer interface {
	Rot13(context.Context, *EncodingRequest) (*EncodingResponse, error)
}

// UnimplementedEncoderBackendServer can be embedded to have forward compatible implementations.
type UnimplementedEncoderBackendServer struct {
}

func (*UnimplementedEncoderBackendServer) Rot13(ctx context.Context, req *EncodingRequest) (*EncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rot13 not implemented")
}

func RegisterEncoderBackendServer(s *grpc.Server, srv EncoderBackendServer) {
	s.RegisterService(&_EncoderBackend_serviceDesc, srv)
}

func _EncoderBackend_Rot13_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderBackendServer).Rot13(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encoder_backend.EncoderBackend/Rot13",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderBackendServer).Rot13(ctx, req.(*EncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EncoderBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "encoder_backend.EncoderBackend",
	HandlerType: (*EncoderBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rot13",
			Handler:    _EncoderBackend_Rot13_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encoder_backend.proto",
}
