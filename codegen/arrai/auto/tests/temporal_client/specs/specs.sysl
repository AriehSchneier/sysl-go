import ./specs.proto
Frontdoor:
    Executor:
        TemporalWorker <- WorkflowWithoutParam
        TemporalWorker <- WorkflowWithOneParam
        TemporalWorker <- WorkflowWithMultipleParams
        TemporalWorker <- WorkflowWithParamAndReturn
        TemporalWorker <- ProtoReqAndResp
        TemporalWorker <- WorkflowWithActivities

    Rest:
        SomeDownstream <- POST /

TemporalWorker [~temporal]:
    !type Param1:
        msg <: string

    !type Param2:
        msg2 <: string

    !type Param3:
        msg3 <: string

    WorkflowWithoutParam [~workflow]:
        ...

    WorkflowWithOneParam(req <: Param1) [~workflow]:
        ...

    WorkflowWithMultipleParams(req1 <: Param1, req2 <: Param2, req3 <: Param3) [~workflow]:
        ...

    WorkflowWithParamAndReturn(req <: Param1) [~workflow]:
        return ok <: Param2

    ProtoReqAndResp(req <: frontdoor.Req) [~workflow]:
        return ok <: frontdoor.Resp

    WorkflowWithActivities(req <: Param1) [~workflow]:
        SomeDownstream <- POST /
        . <- Activity
        . <- ActivityWithParam
        . <- ActivityWithMultipleParams
        . <- ActivityWithParamAndReturn
        return ok <: Param2

    Activity:
        SomeDownstream <- POST /

    ActivityWithParam(req <: Param1):
        SomeDownstream <- POST /

    ActivityWithMultipleParams(req <: Param1, req2 <: Param2, req3 <: Param3):
        SomeDownstream <- POST /

    ActivityWithParamAndReturn(req <: Param1):
        SomeDownstream <- POST /
        return ok <: Param2

SomeDownstream:
    !type SomeReq:
        msg <: string

    !type SomeResp:
        msg <: string

    /:
        POST(req <: SomeReq [~body, mediatype="application/json"]):
            return ok <: SomeResp
