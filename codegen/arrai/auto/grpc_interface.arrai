let go = //{./go};
let sysl = //{./sysl};
let (:gRPCServiceSignature, :renderSignatureAsField, ...) = //{./service_method};

\(:app, :appname, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :nonRestEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | {go.pbImport(app)})}

        ${nonRestEndpoints >> \(@:_, @value: ep) client.clientStruct(ep)::\i}

        // GrpcServiceInterface for ${appname}
        type GrpcServiceInterface struct {
            ${
                nonRestEndpoints >> \(@value: ep, ...)
                    renderSignatureAsField(
                        go.methodName(app, ep),
                        gRPCServiceSignature(module, client, app, ep),
                    )
            ::\i}
        }

        ${client.config}
    `
