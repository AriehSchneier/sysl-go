let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :nonRestEndpoints, ...)
    let client = //{./client}((:app, :appname, :clientDeps, :hasDB, :module));
    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | {go.pbImport(app)})}

        ${nonRestEndpoints >> \(@:_, @value: ep) client.clientStruct(ep)::\i}

        // GrpcServiceInterface for ${appname}
        type GrpcServiceInterface struct {
            ${nonRestEndpoints >> \(@value: ep, ...)
                let name = go.methodName(app, ep);
                let requestType = go.leafType(module, app, ep('param').a(0)('type'));
                let returns = sysl.endpoint.normalReturns(app, ep);
                let returnTypes = returns >> go.name(.type(.type count - 1));
                let returnType = returnTypes(returnTypes count - 1);

                $`${name} func(ctx context.Context, req *pb.${requestType}${cond {client.notEmpty(ep): $`, client ${name}Client`}}) (*pb.${returnType}, error)`
            ::\i}
        }

        ${client.config}
    `
